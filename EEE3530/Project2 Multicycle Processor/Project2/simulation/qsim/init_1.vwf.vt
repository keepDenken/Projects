// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/23/2023 13:28:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    top_level_KMC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_level_KMC_vlg_sample_tst(
	clock,
	INIT_Enable,
	INIT_VALUE,
	INSTRUCTION,
	sampler_tx
);
input  clock;
input  INIT_Enable;
input [63:0] INIT_VALUE;
input [31:0] INSTRUCTION;
output sampler_tx;

reg sample;
time current_time;
always @(clock or INIT_Enable or INIT_VALUE or INSTRUCTION)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module top_level_KMC_vlg_check_tst (
	ADDRESS,
	CURRENT_PC,
	LOOK,
	PROBE,
	READ_VALUE,
	sampler_rx
);
input [63:0] ADDRESS;
input [63:0] CURRENT_PC;
input [63:0] LOOK;
input [63:0] PROBE;
input [63:0] READ_VALUE;
input sampler_rx;

reg [63:0] ADDRESS_expected;
reg [63:0] CURRENT_PC_expected;
reg [63:0] LOOK_expected;
reg [63:0] PROBE_expected;
reg [63:0] READ_VALUE_expected;

reg [63:0] ADDRESS_prev;
reg [63:0] CURRENT_PC_prev;
reg [63:0] LOOK_prev;
reg [63:0] PROBE_prev;
reg [63:0] READ_VALUE_prev;

reg [63:0] ADDRESS_expected_prev;
reg [63:0] CURRENT_PC_expected_prev;
reg [63:0] LOOK_expected_prev;
reg [63:0] PROBE_expected_prev;
reg [63:0] READ_VALUE_expected_prev;

reg [63:0] last_ADDRESS_exp;
reg [63:0] last_CURRENT_PC_exp;
reg [63:0] last_LOOK_exp;
reg [63:0] last_PROBE_exp;
reg [63:0] last_READ_VALUE_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	ADDRESS_prev = ADDRESS;
	CURRENT_PC_prev = CURRENT_PC;
	LOOK_prev = LOOK;
	PROBE_prev = PROBE;
	READ_VALUE_prev = READ_VALUE;
end

// update expected /o prevs

always @(trigger)
begin
	ADDRESS_expected_prev = ADDRESS_expected;
	CURRENT_PC_expected_prev = CURRENT_PC_expected;
	LOOK_expected_prev = LOOK_expected;
	PROBE_expected_prev = PROBE_expected;
	READ_VALUE_expected_prev = READ_VALUE_expected;
end


// expected ADDRESS[ 63 ]
initial
begin
	ADDRESS_expected[63] = 1'bX;
	ADDRESS_expected[63] = #99000 1'b0;
end 
// expected ADDRESS[ 62 ]
initial
begin
	ADDRESS_expected[62] = 1'bX;
	ADDRESS_expected[62] = #99000 1'b0;
end 
// expected ADDRESS[ 61 ]
initial
begin
	ADDRESS_expected[61] = 1'bX;
	ADDRESS_expected[61] = #99000 1'b0;
end 
// expected ADDRESS[ 60 ]
initial
begin
	ADDRESS_expected[60] = 1'bX;
	ADDRESS_expected[60] = #99000 1'b0;
end 
// expected ADDRESS[ 59 ]
initial
begin
	ADDRESS_expected[59] = 1'bX;
	ADDRESS_expected[59] = #99000 1'b0;
end 
// expected ADDRESS[ 58 ]
initial
begin
	ADDRESS_expected[58] = 1'bX;
	ADDRESS_expected[58] = #99000 1'b0;
end 
// expected ADDRESS[ 57 ]
initial
begin
	ADDRESS_expected[57] = 1'bX;
	ADDRESS_expected[57] = #99000 1'b0;
end 
// expected ADDRESS[ 56 ]
initial
begin
	ADDRESS_expected[56] = 1'bX;
	ADDRESS_expected[56] = #99000 1'b0;
end 
// expected ADDRESS[ 55 ]
initial
begin
	ADDRESS_expected[55] = 1'bX;
	ADDRESS_expected[55] = #99000 1'b0;
end 
// expected ADDRESS[ 54 ]
initial
begin
	ADDRESS_expected[54] = 1'bX;
	ADDRESS_expected[54] = #99000 1'b0;
end 
// expected ADDRESS[ 53 ]
initial
begin
	ADDRESS_expected[53] = 1'bX;
	ADDRESS_expected[53] = #99000 1'b0;
end 
// expected ADDRESS[ 52 ]
initial
begin
	ADDRESS_expected[52] = 1'bX;
	ADDRESS_expected[52] = #99000 1'b0;
end 
// expected ADDRESS[ 51 ]
initial
begin
	ADDRESS_expected[51] = 1'bX;
	ADDRESS_expected[51] = #99000 1'b0;
end 
// expected ADDRESS[ 50 ]
initial
begin
	ADDRESS_expected[50] = 1'bX;
	ADDRESS_expected[50] = #99000 1'b0;
end 
// expected ADDRESS[ 49 ]
initial
begin
	ADDRESS_expected[49] = 1'bX;
	ADDRESS_expected[49] = #99000 1'b0;
end 
// expected ADDRESS[ 48 ]
initial
begin
	ADDRESS_expected[48] = 1'bX;
	ADDRESS_expected[48] = #99000 1'b0;
end 
// expected ADDRESS[ 47 ]
initial
begin
	ADDRESS_expected[47] = 1'bX;
	ADDRESS_expected[47] = #99000 1'b0;
end 
// expected ADDRESS[ 46 ]
initial
begin
	ADDRESS_expected[46] = 1'bX;
	ADDRESS_expected[46] = #99000 1'b0;
end 
// expected ADDRESS[ 45 ]
initial
begin
	ADDRESS_expected[45] = 1'bX;
	ADDRESS_expected[45] = #99000 1'b0;
end 
// expected ADDRESS[ 44 ]
initial
begin
	ADDRESS_expected[44] = 1'bX;
	ADDRESS_expected[44] = #99000 1'b0;
end 
// expected ADDRESS[ 43 ]
initial
begin
	ADDRESS_expected[43] = 1'bX;
	ADDRESS_expected[43] = #99000 1'b0;
end 
// expected ADDRESS[ 42 ]
initial
begin
	ADDRESS_expected[42] = 1'bX;
	ADDRESS_expected[42] = #99000 1'b0;
end 
// expected ADDRESS[ 41 ]
initial
begin
	ADDRESS_expected[41] = 1'bX;
	ADDRESS_expected[41] = #99000 1'b0;
end 
// expected ADDRESS[ 40 ]
initial
begin
	ADDRESS_expected[40] = 1'bX;
	ADDRESS_expected[40] = #99000 1'b0;
end 
// expected ADDRESS[ 39 ]
initial
begin
	ADDRESS_expected[39] = 1'bX;
	ADDRESS_expected[39] = #99000 1'b0;
end 
// expected ADDRESS[ 38 ]
initial
begin
	ADDRESS_expected[38] = 1'bX;
	ADDRESS_expected[38] = #99000 1'b0;
end 
// expected ADDRESS[ 37 ]
initial
begin
	ADDRESS_expected[37] = 1'bX;
	ADDRESS_expected[37] = #99000 1'b0;
end 
// expected ADDRESS[ 36 ]
initial
begin
	ADDRESS_expected[36] = 1'bX;
	ADDRESS_expected[36] = #99000 1'b0;
end 
// expected ADDRESS[ 35 ]
initial
begin
	ADDRESS_expected[35] = 1'bX;
	ADDRESS_expected[35] = #99000 1'b0;
end 
// expected ADDRESS[ 34 ]
initial
begin
	ADDRESS_expected[34] = 1'bX;
	ADDRESS_expected[34] = #99000 1'b0;
end 
// expected ADDRESS[ 33 ]
initial
begin
	ADDRESS_expected[33] = 1'bX;
	ADDRESS_expected[33] = #99000 1'b0;
end 
// expected ADDRESS[ 32 ]
initial
begin
	ADDRESS_expected[32] = 1'bX;
	ADDRESS_expected[32] = #99000 1'b0;
end 
// expected ADDRESS[ 31 ]
initial
begin
	ADDRESS_expected[31] = 1'bX;
	ADDRESS_expected[31] = #99000 1'b0;
end 
// expected ADDRESS[ 30 ]
initial
begin
	ADDRESS_expected[30] = 1'bX;
	ADDRESS_expected[30] = #99000 1'b0;
end 
// expected ADDRESS[ 29 ]
initial
begin
	ADDRESS_expected[29] = 1'bX;
	ADDRESS_expected[29] = #99000 1'b0;
end 
// expected ADDRESS[ 28 ]
initial
begin
	ADDRESS_expected[28] = 1'bX;
	ADDRESS_expected[28] = #99000 1'b0;
end 
// expected ADDRESS[ 27 ]
initial
begin
	ADDRESS_expected[27] = 1'bX;
	ADDRESS_expected[27] = #99000 1'b0;
end 
// expected ADDRESS[ 26 ]
initial
begin
	ADDRESS_expected[26] = 1'bX;
	ADDRESS_expected[26] = #99000 1'b0;
end 
// expected ADDRESS[ 25 ]
initial
begin
	ADDRESS_expected[25] = 1'bX;
	ADDRESS_expected[25] = #99000 1'b0;
end 
// expected ADDRESS[ 24 ]
initial
begin
	ADDRESS_expected[24] = 1'bX;
	ADDRESS_expected[24] = #99000 1'b0;
end 
// expected ADDRESS[ 23 ]
initial
begin
	ADDRESS_expected[23] = 1'bX;
	ADDRESS_expected[23] = #99000 1'b0;
end 
// expected ADDRESS[ 22 ]
initial
begin
	ADDRESS_expected[22] = 1'bX;
	ADDRESS_expected[22] = #99000 1'b0;
end 
// expected ADDRESS[ 21 ]
initial
begin
	ADDRESS_expected[21] = 1'bX;
	ADDRESS_expected[21] = #99000 1'b0;
end 
// expected ADDRESS[ 20 ]
initial
begin
	ADDRESS_expected[20] = 1'bX;
	ADDRESS_expected[20] = #99000 1'b0;
end 
// expected ADDRESS[ 19 ]
initial
begin
	ADDRESS_expected[19] = 1'bX;
	ADDRESS_expected[19] = #99000 1'b0;
end 
// expected ADDRESS[ 18 ]
initial
begin
	ADDRESS_expected[18] = 1'bX;
	ADDRESS_expected[18] = #99000 1'b0;
end 
// expected ADDRESS[ 17 ]
initial
begin
	ADDRESS_expected[17] = 1'bX;
	ADDRESS_expected[17] = #99000 1'b0;
end 
// expected ADDRESS[ 16 ]
initial
begin
	ADDRESS_expected[16] = 1'bX;
	ADDRESS_expected[16] = #99000 1'b0;
end 
// expected ADDRESS[ 15 ]
initial
begin
	ADDRESS_expected[15] = 1'bX;
	ADDRESS_expected[15] = #99000 1'b0;
end 
// expected ADDRESS[ 14 ]
initial
begin
	ADDRESS_expected[14] = 1'bX;
	ADDRESS_expected[14] = #99000 1'b0;
end 
// expected ADDRESS[ 13 ]
initial
begin
	ADDRESS_expected[13] = 1'bX;
	ADDRESS_expected[13] = #99000 1'b0;
end 
// expected ADDRESS[ 12 ]
initial
begin
	ADDRESS_expected[12] = 1'bX;
	ADDRESS_expected[12] = #99000 1'b0;
end 
// expected ADDRESS[ 11 ]
initial
begin
	ADDRESS_expected[11] = 1'bX;
	ADDRESS_expected[11] = #99000 1'b0;
end 
// expected ADDRESS[ 10 ]
initial
begin
	ADDRESS_expected[10] = 1'bX;
	ADDRESS_expected[10] = #99000 1'b0;
end 
// expected ADDRESS[ 9 ]
initial
begin
	ADDRESS_expected[9] = 1'bX;
	ADDRESS_expected[9] = #99000 1'b0;
end 
// expected ADDRESS[ 8 ]
initial
begin
	ADDRESS_expected[8] = 1'bX;
	ADDRESS_expected[8] = #99000 1'b0;
end 
// expected ADDRESS[ 7 ]
initial
begin
	ADDRESS_expected[7] = 1'bX;
	ADDRESS_expected[7] = #99000 1'b0;
end 
// expected ADDRESS[ 6 ]
initial
begin
	ADDRESS_expected[6] = 1'bX;
	ADDRESS_expected[6] = #99000 1'b0;
end 
// expected ADDRESS[ 5 ]
initial
begin
	ADDRESS_expected[5] = 1'bX;
	ADDRESS_expected[5] = #99000 1'b0;
end 
// expected ADDRESS[ 4 ]
initial
begin
	ADDRESS_expected[4] = 1'bX;
	ADDRESS_expected[4] = #99000 1'b0;
end 
// expected ADDRESS[ 3 ]
initial
begin
	ADDRESS_expected[3] = 1'bX;
	ADDRESS_expected[3] = #99000 1'b0;
end 
// expected ADDRESS[ 2 ]
initial
begin
	ADDRESS_expected[2] = 1'bX;
	ADDRESS_expected[2] = #99000 1'b0;
end 
// expected ADDRESS[ 1 ]
initial
begin
	ADDRESS_expected[1] = 1'bX;
	ADDRESS_expected[1] = #99000 1'b0;
end 
// expected ADDRESS[ 0 ]
initial
begin
	ADDRESS_expected[0] = 1'bX;
	ADDRESS_expected[0] = #99000 1'b0;
end 
// expected CURRENT_PC[ 63 ]
initial
begin
	CURRENT_PC_expected[63] = 1'bX;
	CURRENT_PC_expected[63] = #99000 1'b0;
end 
// expected CURRENT_PC[ 62 ]
initial
begin
	CURRENT_PC_expected[62] = 1'bX;
	CURRENT_PC_expected[62] = #99000 1'b0;
end 
// expected CURRENT_PC[ 61 ]
initial
begin
	CURRENT_PC_expected[61] = 1'bX;
	CURRENT_PC_expected[61] = #99000 1'b0;
end 
// expected CURRENT_PC[ 60 ]
initial
begin
	CURRENT_PC_expected[60] = 1'bX;
	CURRENT_PC_expected[60] = #99000 1'b0;
end 
// expected CURRENT_PC[ 59 ]
initial
begin
	CURRENT_PC_expected[59] = 1'bX;
	CURRENT_PC_expected[59] = #99000 1'b0;
end 
// expected CURRENT_PC[ 58 ]
initial
begin
	CURRENT_PC_expected[58] = 1'bX;
	CURRENT_PC_expected[58] = #99000 1'b0;
end 
// expected CURRENT_PC[ 57 ]
initial
begin
	CURRENT_PC_expected[57] = 1'bX;
	CURRENT_PC_expected[57] = #99000 1'b0;
end 
// expected CURRENT_PC[ 56 ]
initial
begin
	CURRENT_PC_expected[56] = 1'bX;
	CURRENT_PC_expected[56] = #99000 1'b0;
end 
// expected CURRENT_PC[ 55 ]
initial
begin
	CURRENT_PC_expected[55] = 1'bX;
	CURRENT_PC_expected[55] = #99000 1'b0;
end 
// expected CURRENT_PC[ 54 ]
initial
begin
	CURRENT_PC_expected[54] = 1'bX;
	CURRENT_PC_expected[54] = #99000 1'b0;
end 
// expected CURRENT_PC[ 53 ]
initial
begin
	CURRENT_PC_expected[53] = 1'bX;
	CURRENT_PC_expected[53] = #99000 1'b0;
end 
// expected CURRENT_PC[ 52 ]
initial
begin
	CURRENT_PC_expected[52] = 1'bX;
	CURRENT_PC_expected[52] = #99000 1'b0;
end 
// expected CURRENT_PC[ 51 ]
initial
begin
	CURRENT_PC_expected[51] = 1'bX;
	CURRENT_PC_expected[51] = #99000 1'b0;
end 
// expected CURRENT_PC[ 50 ]
initial
begin
	CURRENT_PC_expected[50] = 1'bX;
	CURRENT_PC_expected[50] = #99000 1'b0;
end 
// expected CURRENT_PC[ 49 ]
initial
begin
	CURRENT_PC_expected[49] = 1'bX;
	CURRENT_PC_expected[49] = #99000 1'b0;
end 
// expected CURRENT_PC[ 48 ]
initial
begin
	CURRENT_PC_expected[48] = 1'bX;
	CURRENT_PC_expected[48] = #99000 1'b0;
end 
// expected CURRENT_PC[ 47 ]
initial
begin
	CURRENT_PC_expected[47] = 1'bX;
	CURRENT_PC_expected[47] = #99000 1'b0;
end 
// expected CURRENT_PC[ 46 ]
initial
begin
	CURRENT_PC_expected[46] = 1'bX;
	CURRENT_PC_expected[46] = #99000 1'b0;
end 
// expected CURRENT_PC[ 45 ]
initial
begin
	CURRENT_PC_expected[45] = 1'bX;
	CURRENT_PC_expected[45] = #99000 1'b0;
end 
// expected CURRENT_PC[ 44 ]
initial
begin
	CURRENT_PC_expected[44] = 1'bX;
	CURRENT_PC_expected[44] = #99000 1'b0;
end 
// expected CURRENT_PC[ 43 ]
initial
begin
	CURRENT_PC_expected[43] = 1'bX;
	CURRENT_PC_expected[43] = #99000 1'b0;
end 
// expected CURRENT_PC[ 42 ]
initial
begin
	CURRENT_PC_expected[42] = 1'bX;
	CURRENT_PC_expected[42] = #99000 1'b0;
end 
// expected CURRENT_PC[ 41 ]
initial
begin
	CURRENT_PC_expected[41] = 1'bX;
	CURRENT_PC_expected[41] = #99000 1'b0;
end 
// expected CURRENT_PC[ 40 ]
initial
begin
	CURRENT_PC_expected[40] = 1'bX;
	CURRENT_PC_expected[40] = #99000 1'b0;
end 
// expected CURRENT_PC[ 39 ]
initial
begin
	CURRENT_PC_expected[39] = 1'bX;
	CURRENT_PC_expected[39] = #99000 1'b0;
end 
// expected CURRENT_PC[ 38 ]
initial
begin
	CURRENT_PC_expected[38] = 1'bX;
	CURRENT_PC_expected[38] = #99000 1'b0;
end 
// expected CURRENT_PC[ 37 ]
initial
begin
	CURRENT_PC_expected[37] = 1'bX;
	CURRENT_PC_expected[37] = #99000 1'b0;
end 
// expected CURRENT_PC[ 36 ]
initial
begin
	CURRENT_PC_expected[36] = 1'bX;
	CURRENT_PC_expected[36] = #99000 1'b0;
end 
// expected CURRENT_PC[ 35 ]
initial
begin
	CURRENT_PC_expected[35] = 1'bX;
	CURRENT_PC_expected[35] = #99000 1'b0;
end 
// expected CURRENT_PC[ 34 ]
initial
begin
	CURRENT_PC_expected[34] = 1'bX;
	CURRENT_PC_expected[34] = #99000 1'b0;
end 
// expected CURRENT_PC[ 33 ]
initial
begin
	CURRENT_PC_expected[33] = 1'bX;
	CURRENT_PC_expected[33] = #99000 1'b0;
end 
// expected CURRENT_PC[ 32 ]
initial
begin
	CURRENT_PC_expected[32] = 1'bX;
	CURRENT_PC_expected[32] = #99000 1'b0;
end 
// expected CURRENT_PC[ 31 ]
initial
begin
	CURRENT_PC_expected[31] = 1'bX;
	CURRENT_PC_expected[31] = #99000 1'b0;
end 
// expected CURRENT_PC[ 30 ]
initial
begin
	CURRENT_PC_expected[30] = 1'bX;
	CURRENT_PC_expected[30] = #99000 1'b0;
end 
// expected CURRENT_PC[ 29 ]
initial
begin
	CURRENT_PC_expected[29] = 1'bX;
	CURRENT_PC_expected[29] = #99000 1'b0;
end 
// expected CURRENT_PC[ 28 ]
initial
begin
	CURRENT_PC_expected[28] = 1'bX;
	CURRENT_PC_expected[28] = #99000 1'b0;
end 
// expected CURRENT_PC[ 27 ]
initial
begin
	CURRENT_PC_expected[27] = 1'bX;
	CURRENT_PC_expected[27] = #99000 1'b0;
end 
// expected CURRENT_PC[ 26 ]
initial
begin
	CURRENT_PC_expected[26] = 1'bX;
	CURRENT_PC_expected[26] = #99000 1'b0;
end 
// expected CURRENT_PC[ 25 ]
initial
begin
	CURRENT_PC_expected[25] = 1'bX;
	CURRENT_PC_expected[25] = #99000 1'b0;
end 
// expected CURRENT_PC[ 24 ]
initial
begin
	CURRENT_PC_expected[24] = 1'bX;
	CURRENT_PC_expected[24] = #99000 1'b0;
end 
// expected CURRENT_PC[ 23 ]
initial
begin
	CURRENT_PC_expected[23] = 1'bX;
	CURRENT_PC_expected[23] = #99000 1'b0;
end 
// expected CURRENT_PC[ 22 ]
initial
begin
	CURRENT_PC_expected[22] = 1'bX;
	CURRENT_PC_expected[22] = #99000 1'b0;
end 
// expected CURRENT_PC[ 21 ]
initial
begin
	CURRENT_PC_expected[21] = 1'bX;
	CURRENT_PC_expected[21] = #99000 1'b0;
end 
// expected CURRENT_PC[ 20 ]
initial
begin
	CURRENT_PC_expected[20] = 1'bX;
	CURRENT_PC_expected[20] = #99000 1'b0;
end 
// expected CURRENT_PC[ 19 ]
initial
begin
	CURRENT_PC_expected[19] = 1'bX;
	CURRENT_PC_expected[19] = #99000 1'b0;
end 
// expected CURRENT_PC[ 18 ]
initial
begin
	CURRENT_PC_expected[18] = 1'bX;
	CURRENT_PC_expected[18] = #99000 1'b0;
end 
// expected CURRENT_PC[ 17 ]
initial
begin
	CURRENT_PC_expected[17] = 1'bX;
	CURRENT_PC_expected[17] = #99000 1'b0;
end 
// expected CURRENT_PC[ 16 ]
initial
begin
	CURRENT_PC_expected[16] = 1'bX;
	CURRENT_PC_expected[16] = #99000 1'b0;
end 
// expected CURRENT_PC[ 15 ]
initial
begin
	CURRENT_PC_expected[15] = 1'bX;
	CURRENT_PC_expected[15] = #99000 1'b0;
end 
// expected CURRENT_PC[ 14 ]
initial
begin
	CURRENT_PC_expected[14] = 1'bX;
	CURRENT_PC_expected[14] = #99000 1'b0;
end 
// expected CURRENT_PC[ 13 ]
initial
begin
	CURRENT_PC_expected[13] = 1'bX;
	CURRENT_PC_expected[13] = #99000 1'b0;
end 
// expected CURRENT_PC[ 12 ]
initial
begin
	CURRENT_PC_expected[12] = 1'bX;
	CURRENT_PC_expected[12] = #99000 1'b0;
end 
// expected CURRENT_PC[ 11 ]
initial
begin
	CURRENT_PC_expected[11] = 1'bX;
	CURRENT_PC_expected[11] = #99000 1'b0;
end 
// expected CURRENT_PC[ 10 ]
initial
begin
	CURRENT_PC_expected[10] = 1'bX;
	CURRENT_PC_expected[10] = #99000 1'b0;
end 
// expected CURRENT_PC[ 9 ]
initial
begin
	CURRENT_PC_expected[9] = 1'bX;
	CURRENT_PC_expected[9] = #99000 1'b0;
end 
// expected CURRENT_PC[ 8 ]
initial
begin
	CURRENT_PC_expected[8] = 1'bX;
	CURRENT_PC_expected[8] = #99000 1'b0;
end 
// expected CURRENT_PC[ 7 ]
initial
begin
	CURRENT_PC_expected[7] = 1'bX;
	CURRENT_PC_expected[7] = #99000 1'b0;
end 
// expected CURRENT_PC[ 6 ]
initial
begin
	CURRENT_PC_expected[6] = 1'bX;
	CURRENT_PC_expected[6] = #99000 1'b0;
end 
// expected CURRENT_PC[ 5 ]
initial
begin
	CURRENT_PC_expected[5] = 1'bX;
	CURRENT_PC_expected[5] = #99000 1'b0;
end 
// expected CURRENT_PC[ 4 ]
initial
begin
	CURRENT_PC_expected[4] = 1'bX;
	CURRENT_PC_expected[4] = #99000 1'b0;
end 
// expected CURRENT_PC[ 3 ]
initial
begin
	CURRENT_PC_expected[3] = 1'bX;
	CURRENT_PC_expected[3] = #99000 1'b0;
end 
// expected CURRENT_PC[ 2 ]
initial
begin
	CURRENT_PC_expected[2] = 1'bX;
	CURRENT_PC_expected[2] = #99000 1'b0;
end 
// expected CURRENT_PC[ 1 ]
initial
begin
	CURRENT_PC_expected[1] = 1'bX;
	CURRENT_PC_expected[1] = #99000 1'b0;
end 
// expected CURRENT_PC[ 0 ]
initial
begin
	CURRENT_PC_expected[0] = 1'bX;
	CURRENT_PC_expected[0] = #99000 1'b0;
end 
// expected LOOK[ 63 ]
initial
begin
	LOOK_expected[63] = 1'bX;
	LOOK_expected[63] = #99000 1'b0;
end 
// expected LOOK[ 62 ]
initial
begin
	LOOK_expected[62] = 1'bX;
	LOOK_expected[62] = #99000 1'b0;
end 
// expected LOOK[ 61 ]
initial
begin
	LOOK_expected[61] = 1'bX;
	LOOK_expected[61] = #99000 1'b0;
end 
// expected LOOK[ 60 ]
initial
begin
	LOOK_expected[60] = 1'bX;
	LOOK_expected[60] = #99000 1'b0;
end 
// expected LOOK[ 59 ]
initial
begin
	LOOK_expected[59] = 1'bX;
	LOOK_expected[59] = #99000 1'b0;
end 
// expected LOOK[ 58 ]
initial
begin
	LOOK_expected[58] = 1'bX;
	LOOK_expected[58] = #99000 1'b0;
end 
// expected LOOK[ 57 ]
initial
begin
	LOOK_expected[57] = 1'bX;
	LOOK_expected[57] = #99000 1'b0;
end 
// expected LOOK[ 56 ]
initial
begin
	LOOK_expected[56] = 1'bX;
	LOOK_expected[56] = #99000 1'b0;
end 
// expected LOOK[ 55 ]
initial
begin
	LOOK_expected[55] = 1'bX;
	LOOK_expected[55] = #99000 1'b0;
end 
// expected LOOK[ 54 ]
initial
begin
	LOOK_expected[54] = 1'bX;
	LOOK_expected[54] = #99000 1'b0;
end 
// expected LOOK[ 53 ]
initial
begin
	LOOK_expected[53] = 1'bX;
	LOOK_expected[53] = #99000 1'b0;
end 
// expected LOOK[ 52 ]
initial
begin
	LOOK_expected[52] = 1'bX;
	LOOK_expected[52] = #99000 1'b0;
end 
// expected LOOK[ 51 ]
initial
begin
	LOOK_expected[51] = 1'bX;
	LOOK_expected[51] = #99000 1'b0;
end 
// expected LOOK[ 50 ]
initial
begin
	LOOK_expected[50] = 1'bX;
	LOOK_expected[50] = #99000 1'b0;
end 
// expected LOOK[ 49 ]
initial
begin
	LOOK_expected[49] = 1'bX;
	LOOK_expected[49] = #99000 1'b0;
end 
// expected LOOK[ 48 ]
initial
begin
	LOOK_expected[48] = 1'bX;
	LOOK_expected[48] = #99000 1'b0;
end 
// expected LOOK[ 47 ]
initial
begin
	LOOK_expected[47] = 1'bX;
	LOOK_expected[47] = #99000 1'b0;
end 
// expected LOOK[ 46 ]
initial
begin
	LOOK_expected[46] = 1'bX;
	LOOK_expected[46] = #99000 1'b0;
end 
// expected LOOK[ 45 ]
initial
begin
	LOOK_expected[45] = 1'bX;
	LOOK_expected[45] = #99000 1'b0;
end 
// expected LOOK[ 44 ]
initial
begin
	LOOK_expected[44] = 1'bX;
	LOOK_expected[44] = #99000 1'b0;
end 
// expected LOOK[ 43 ]
initial
begin
	LOOK_expected[43] = 1'bX;
	LOOK_expected[43] = #99000 1'b0;
end 
// expected LOOK[ 42 ]
initial
begin
	LOOK_expected[42] = 1'bX;
	LOOK_expected[42] = #99000 1'b0;
end 
// expected LOOK[ 41 ]
initial
begin
	LOOK_expected[41] = 1'bX;
	LOOK_expected[41] = #99000 1'b0;
end 
// expected LOOK[ 40 ]
initial
begin
	LOOK_expected[40] = 1'bX;
	LOOK_expected[40] = #99000 1'b0;
end 
// expected LOOK[ 39 ]
initial
begin
	LOOK_expected[39] = 1'bX;
	LOOK_expected[39] = #99000 1'b0;
end 
// expected LOOK[ 38 ]
initial
begin
	LOOK_expected[38] = 1'bX;
	LOOK_expected[38] = #99000 1'b0;
end 
// expected LOOK[ 37 ]
initial
begin
	LOOK_expected[37] = 1'bX;
	LOOK_expected[37] = #99000 1'b0;
end 
// expected LOOK[ 36 ]
initial
begin
	LOOK_expected[36] = 1'bX;
	LOOK_expected[36] = #99000 1'b0;
end 
// expected LOOK[ 35 ]
initial
begin
	LOOK_expected[35] = 1'bX;
	LOOK_expected[35] = #99000 1'b0;
end 
// expected LOOK[ 34 ]
initial
begin
	LOOK_expected[34] = 1'bX;
	LOOK_expected[34] = #99000 1'b0;
end 
// expected LOOK[ 33 ]
initial
begin
	LOOK_expected[33] = 1'bX;
	LOOK_expected[33] = #99000 1'b0;
end 
// expected LOOK[ 32 ]
initial
begin
	LOOK_expected[32] = 1'bX;
	LOOK_expected[32] = #99000 1'b0;
end 
// expected LOOK[ 31 ]
initial
begin
	LOOK_expected[31] = 1'bX;
	LOOK_expected[31] = #99000 1'b0;
end 
// expected LOOK[ 30 ]
initial
begin
	LOOK_expected[30] = 1'bX;
	LOOK_expected[30] = #99000 1'b0;
end 
// expected LOOK[ 29 ]
initial
begin
	LOOK_expected[29] = 1'bX;
	LOOK_expected[29] = #99000 1'b0;
end 
// expected LOOK[ 28 ]
initial
begin
	LOOK_expected[28] = 1'bX;
	LOOK_expected[28] = #99000 1'b0;
end 
// expected LOOK[ 27 ]
initial
begin
	LOOK_expected[27] = 1'bX;
	LOOK_expected[27] = #99000 1'b0;
end 
// expected LOOK[ 26 ]
initial
begin
	LOOK_expected[26] = 1'bX;
	LOOK_expected[26] = #99000 1'b0;
end 
// expected LOOK[ 25 ]
initial
begin
	LOOK_expected[25] = 1'bX;
	LOOK_expected[25] = #99000 1'b0;
end 
// expected LOOK[ 24 ]
initial
begin
	LOOK_expected[24] = 1'bX;
	LOOK_expected[24] = #99000 1'b0;
end 
// expected LOOK[ 23 ]
initial
begin
	LOOK_expected[23] = 1'bX;
	LOOK_expected[23] = #99000 1'b0;
end 
// expected LOOK[ 22 ]
initial
begin
	LOOK_expected[22] = 1'bX;
	LOOK_expected[22] = #99000 1'b0;
end 
// expected LOOK[ 21 ]
initial
begin
	LOOK_expected[21] = 1'bX;
	LOOK_expected[21] = #99000 1'b0;
end 
// expected LOOK[ 20 ]
initial
begin
	LOOK_expected[20] = 1'bX;
	LOOK_expected[20] = #99000 1'b0;
end 
// expected LOOK[ 19 ]
initial
begin
	LOOK_expected[19] = 1'bX;
	LOOK_expected[19] = #99000 1'b0;
end 
// expected LOOK[ 18 ]
initial
begin
	LOOK_expected[18] = 1'bX;
	LOOK_expected[18] = #99000 1'b0;
end 
// expected LOOK[ 17 ]
initial
begin
	LOOK_expected[17] = 1'bX;
	LOOK_expected[17] = #99000 1'b0;
end 
// expected LOOK[ 16 ]
initial
begin
	LOOK_expected[16] = 1'bX;
	LOOK_expected[16] = #99000 1'b0;
end 
// expected LOOK[ 15 ]
initial
begin
	LOOK_expected[15] = 1'bX;
	LOOK_expected[15] = #99000 1'b0;
end 
// expected LOOK[ 14 ]
initial
begin
	LOOK_expected[14] = 1'bX;
	LOOK_expected[14] = #99000 1'b0;
end 
// expected LOOK[ 13 ]
initial
begin
	LOOK_expected[13] = 1'bX;
	LOOK_expected[13] = #99000 1'b0;
end 
// expected LOOK[ 12 ]
initial
begin
	LOOK_expected[12] = 1'bX;
	LOOK_expected[12] = #99000 1'b0;
end 
// expected LOOK[ 11 ]
initial
begin
	LOOK_expected[11] = 1'bX;
	LOOK_expected[11] = #99000 1'b0;
end 
// expected LOOK[ 10 ]
initial
begin
	LOOK_expected[10] = 1'bX;
	LOOK_expected[10] = #99000 1'b0;
end 
// expected LOOK[ 9 ]
initial
begin
	LOOK_expected[9] = 1'bX;
	LOOK_expected[9] = #99000 1'b0;
end 
// expected LOOK[ 8 ]
initial
begin
	LOOK_expected[8] = 1'bX;
	LOOK_expected[8] = #99000 1'b0;
end 
// expected LOOK[ 7 ]
initial
begin
	LOOK_expected[7] = 1'bX;
	LOOK_expected[7] = #99000 1'b0;
end 
// expected LOOK[ 6 ]
initial
begin
	LOOK_expected[6] = 1'bX;
	LOOK_expected[6] = #99000 1'b0;
end 
// expected LOOK[ 5 ]
initial
begin
	LOOK_expected[5] = 1'bX;
	LOOK_expected[5] = #99000 1'b0;
end 
// expected LOOK[ 4 ]
initial
begin
	LOOK_expected[4] = 1'bX;
	LOOK_expected[4] = #99000 1'b0;
end 
// expected LOOK[ 3 ]
initial
begin
	LOOK_expected[3] = 1'bX;
	LOOK_expected[3] = #99000 1'b0;
end 
// expected LOOK[ 2 ]
initial
begin
	LOOK_expected[2] = 1'bX;
	LOOK_expected[2] = #99000 1'b0;
end 
// expected LOOK[ 1 ]
initial
begin
	LOOK_expected[1] = 1'bX;
	LOOK_expected[1] = #99000 1'b0;
end 
// expected LOOK[ 0 ]
initial
begin
	LOOK_expected[0] = 1'bX;
	LOOK_expected[0] = #99000 1'b0;
end 
// expected PROBE[ 63 ]
initial
begin
	PROBE_expected[63] = 1'bX;
	PROBE_expected[63] = #99000 1'b0;
end 
// expected PROBE[ 62 ]
initial
begin
	PROBE_expected[62] = 1'bX;
	PROBE_expected[62] = #99000 1'b0;
end 
// expected PROBE[ 61 ]
initial
begin
	PROBE_expected[61] = 1'bX;
	PROBE_expected[61] = #99000 1'b0;
end 
// expected PROBE[ 60 ]
initial
begin
	PROBE_expected[60] = 1'bX;
	PROBE_expected[60] = #99000 1'b0;
end 
// expected PROBE[ 59 ]
initial
begin
	PROBE_expected[59] = 1'bX;
	PROBE_expected[59] = #99000 1'b0;
end 
// expected PROBE[ 58 ]
initial
begin
	PROBE_expected[58] = 1'bX;
	PROBE_expected[58] = #99000 1'b0;
end 
// expected PROBE[ 57 ]
initial
begin
	PROBE_expected[57] = 1'bX;
	PROBE_expected[57] = #99000 1'b0;
end 
// expected PROBE[ 56 ]
initial
begin
	PROBE_expected[56] = 1'bX;
	PROBE_expected[56] = #99000 1'b0;
end 
// expected PROBE[ 55 ]
initial
begin
	PROBE_expected[55] = 1'bX;
	PROBE_expected[55] = #99000 1'b0;
end 
// expected PROBE[ 54 ]
initial
begin
	PROBE_expected[54] = 1'bX;
	PROBE_expected[54] = #99000 1'b0;
end 
// expected PROBE[ 53 ]
initial
begin
	PROBE_expected[53] = 1'bX;
	PROBE_expected[53] = #99000 1'b0;
end 
// expected PROBE[ 52 ]
initial
begin
	PROBE_expected[52] = 1'bX;
	PROBE_expected[52] = #99000 1'b0;
end 
// expected PROBE[ 51 ]
initial
begin
	PROBE_expected[51] = 1'bX;
	PROBE_expected[51] = #99000 1'b0;
end 
// expected PROBE[ 50 ]
initial
begin
	PROBE_expected[50] = 1'bX;
	PROBE_expected[50] = #99000 1'b0;
end 
// expected PROBE[ 49 ]
initial
begin
	PROBE_expected[49] = 1'bX;
	PROBE_expected[49] = #99000 1'b0;
end 
// expected PROBE[ 48 ]
initial
begin
	PROBE_expected[48] = 1'bX;
	PROBE_expected[48] = #99000 1'b0;
end 
// expected PROBE[ 47 ]
initial
begin
	PROBE_expected[47] = 1'bX;
	PROBE_expected[47] = #99000 1'b0;
end 
// expected PROBE[ 46 ]
initial
begin
	PROBE_expected[46] = 1'bX;
	PROBE_expected[46] = #99000 1'b0;
end 
// expected PROBE[ 45 ]
initial
begin
	PROBE_expected[45] = 1'bX;
	PROBE_expected[45] = #99000 1'b0;
end 
// expected PROBE[ 44 ]
initial
begin
	PROBE_expected[44] = 1'bX;
	PROBE_expected[44] = #99000 1'b0;
end 
// expected PROBE[ 43 ]
initial
begin
	PROBE_expected[43] = 1'bX;
	PROBE_expected[43] = #99000 1'b0;
end 
// expected PROBE[ 42 ]
initial
begin
	PROBE_expected[42] = 1'bX;
	PROBE_expected[42] = #99000 1'b0;
end 
// expected PROBE[ 41 ]
initial
begin
	PROBE_expected[41] = 1'bX;
	PROBE_expected[41] = #99000 1'b0;
end 
// expected PROBE[ 40 ]
initial
begin
	PROBE_expected[40] = 1'bX;
	PROBE_expected[40] = #99000 1'b0;
end 
// expected PROBE[ 39 ]
initial
begin
	PROBE_expected[39] = 1'bX;
	PROBE_expected[39] = #99000 1'b0;
end 
// expected PROBE[ 38 ]
initial
begin
	PROBE_expected[38] = 1'bX;
	PROBE_expected[38] = #99000 1'b0;
end 
// expected PROBE[ 37 ]
initial
begin
	PROBE_expected[37] = 1'bX;
	PROBE_expected[37] = #99000 1'b0;
end 
// expected PROBE[ 36 ]
initial
begin
	PROBE_expected[36] = 1'bX;
	PROBE_expected[36] = #99000 1'b0;
end 
// expected PROBE[ 35 ]
initial
begin
	PROBE_expected[35] = 1'bX;
	PROBE_expected[35] = #99000 1'b0;
end 
// expected PROBE[ 34 ]
initial
begin
	PROBE_expected[34] = 1'bX;
	PROBE_expected[34] = #99000 1'b0;
end 
// expected PROBE[ 33 ]
initial
begin
	PROBE_expected[33] = 1'bX;
	PROBE_expected[33] = #99000 1'b0;
end 
// expected PROBE[ 32 ]
initial
begin
	PROBE_expected[32] = 1'bX;
	PROBE_expected[32] = #99000 1'b0;
end 
// expected PROBE[ 31 ]
initial
begin
	PROBE_expected[31] = 1'bX;
	PROBE_expected[31] = #99000 1'b0;
end 
// expected PROBE[ 30 ]
initial
begin
	PROBE_expected[30] = 1'bX;
	PROBE_expected[30] = #99000 1'b0;
end 
// expected PROBE[ 29 ]
initial
begin
	PROBE_expected[29] = 1'bX;
	PROBE_expected[29] = #99000 1'b0;
end 
// expected PROBE[ 28 ]
initial
begin
	PROBE_expected[28] = 1'bX;
	PROBE_expected[28] = #99000 1'b0;
end 
// expected PROBE[ 27 ]
initial
begin
	PROBE_expected[27] = 1'bX;
	PROBE_expected[27] = #99000 1'b0;
end 
// expected PROBE[ 26 ]
initial
begin
	PROBE_expected[26] = 1'bX;
	PROBE_expected[26] = #99000 1'b0;
end 
// expected PROBE[ 25 ]
initial
begin
	PROBE_expected[25] = 1'bX;
	PROBE_expected[25] = #99000 1'b0;
end 
// expected PROBE[ 24 ]
initial
begin
	PROBE_expected[24] = 1'bX;
	PROBE_expected[24] = #99000 1'b0;
end 
// expected PROBE[ 23 ]
initial
begin
	PROBE_expected[23] = 1'bX;
	PROBE_expected[23] = #99000 1'b0;
end 
// expected PROBE[ 22 ]
initial
begin
	PROBE_expected[22] = 1'bX;
	PROBE_expected[22] = #99000 1'b0;
end 
// expected PROBE[ 21 ]
initial
begin
	PROBE_expected[21] = 1'bX;
	PROBE_expected[21] = #99000 1'b0;
end 
// expected PROBE[ 20 ]
initial
begin
	PROBE_expected[20] = 1'bX;
	PROBE_expected[20] = #99000 1'b0;
end 
// expected PROBE[ 19 ]
initial
begin
	PROBE_expected[19] = 1'bX;
	PROBE_expected[19] = #99000 1'b0;
end 
// expected PROBE[ 18 ]
initial
begin
	PROBE_expected[18] = 1'bX;
	PROBE_expected[18] = #99000 1'b0;
end 
// expected PROBE[ 17 ]
initial
begin
	PROBE_expected[17] = 1'bX;
	PROBE_expected[17] = #99000 1'b0;
end 
// expected PROBE[ 16 ]
initial
begin
	PROBE_expected[16] = 1'bX;
	PROBE_expected[16] = #99000 1'b0;
end 
// expected PROBE[ 15 ]
initial
begin
	PROBE_expected[15] = 1'bX;
	PROBE_expected[15] = #99000 1'b0;
end 
// expected PROBE[ 14 ]
initial
begin
	PROBE_expected[14] = 1'bX;
	PROBE_expected[14] = #99000 1'b0;
end 
// expected PROBE[ 13 ]
initial
begin
	PROBE_expected[13] = 1'bX;
	PROBE_expected[13] = #99000 1'b0;
end 
// expected PROBE[ 12 ]
initial
begin
	PROBE_expected[12] = 1'bX;
	PROBE_expected[12] = #99000 1'b0;
end 
// expected PROBE[ 11 ]
initial
begin
	PROBE_expected[11] = 1'bX;
	PROBE_expected[11] = #99000 1'b0;
end 
// expected PROBE[ 10 ]
initial
begin
	PROBE_expected[10] = 1'bX;
	PROBE_expected[10] = #99000 1'b0;
end 
// expected PROBE[ 9 ]
initial
begin
	PROBE_expected[9] = 1'bX;
	PROBE_expected[9] = #99000 1'b0;
end 
// expected PROBE[ 8 ]
initial
begin
	PROBE_expected[8] = 1'bX;
	PROBE_expected[8] = #99000 1'b0;
end 
// expected PROBE[ 7 ]
initial
begin
	PROBE_expected[7] = 1'bX;
	PROBE_expected[7] = #99000 1'b0;
end 
// expected PROBE[ 6 ]
initial
begin
	PROBE_expected[6] = 1'bX;
	PROBE_expected[6] = #99000 1'b0;
end 
// expected PROBE[ 5 ]
initial
begin
	PROBE_expected[5] = 1'bX;
	PROBE_expected[5] = #99000 1'b0;
end 
// expected PROBE[ 4 ]
initial
begin
	PROBE_expected[4] = 1'bX;
	PROBE_expected[4] = #99000 1'b0;
end 
// expected PROBE[ 3 ]
initial
begin
	PROBE_expected[3] = 1'bX;
	PROBE_expected[3] = #99000 1'b0;
end 
// expected PROBE[ 2 ]
initial
begin
	PROBE_expected[2] = 1'bX;
	PROBE_expected[2] = #99000 1'b0;
end 
// expected PROBE[ 1 ]
initial
begin
	PROBE_expected[1] = 1'bX;
	PROBE_expected[1] = #99000 1'b0;
end 
// expected PROBE[ 0 ]
initial
begin
	PROBE_expected[0] = 1'bX;
	PROBE_expected[0] = #99000 1'b0;
end 
// expected READ_VALUE[ 63 ]
initial
begin
	READ_VALUE_expected[63] = 1'bX;
	READ_VALUE_expected[63] = #99000 1'b0;
end 
// expected READ_VALUE[ 62 ]
initial
begin
	READ_VALUE_expected[62] = 1'bX;
	READ_VALUE_expected[62] = #99000 1'b0;
end 
// expected READ_VALUE[ 61 ]
initial
begin
	READ_VALUE_expected[61] = 1'bX;
	READ_VALUE_expected[61] = #99000 1'b0;
end 
// expected READ_VALUE[ 60 ]
initial
begin
	READ_VALUE_expected[60] = 1'bX;
	READ_VALUE_expected[60] = #99000 1'b0;
end 
// expected READ_VALUE[ 59 ]
initial
begin
	READ_VALUE_expected[59] = 1'bX;
	READ_VALUE_expected[59] = #99000 1'b0;
end 
// expected READ_VALUE[ 58 ]
initial
begin
	READ_VALUE_expected[58] = 1'bX;
	READ_VALUE_expected[58] = #99000 1'b0;
end 
// expected READ_VALUE[ 57 ]
initial
begin
	READ_VALUE_expected[57] = 1'bX;
	READ_VALUE_expected[57] = #99000 1'b0;
end 
// expected READ_VALUE[ 56 ]
initial
begin
	READ_VALUE_expected[56] = 1'bX;
	READ_VALUE_expected[56] = #99000 1'b0;
end 
// expected READ_VALUE[ 55 ]
initial
begin
	READ_VALUE_expected[55] = 1'bX;
	READ_VALUE_expected[55] = #99000 1'b0;
end 
// expected READ_VALUE[ 54 ]
initial
begin
	READ_VALUE_expected[54] = 1'bX;
	READ_VALUE_expected[54] = #99000 1'b0;
end 
// expected READ_VALUE[ 53 ]
initial
begin
	READ_VALUE_expected[53] = 1'bX;
	READ_VALUE_expected[53] = #99000 1'b0;
end 
// expected READ_VALUE[ 52 ]
initial
begin
	READ_VALUE_expected[52] = 1'bX;
	READ_VALUE_expected[52] = #99000 1'b0;
end 
// expected READ_VALUE[ 51 ]
initial
begin
	READ_VALUE_expected[51] = 1'bX;
	READ_VALUE_expected[51] = #99000 1'b0;
end 
// expected READ_VALUE[ 50 ]
initial
begin
	READ_VALUE_expected[50] = 1'bX;
	READ_VALUE_expected[50] = #99000 1'b0;
end 
// expected READ_VALUE[ 49 ]
initial
begin
	READ_VALUE_expected[49] = 1'bX;
	READ_VALUE_expected[49] = #99000 1'b0;
end 
// expected READ_VALUE[ 48 ]
initial
begin
	READ_VALUE_expected[48] = 1'bX;
	READ_VALUE_expected[48] = #99000 1'b0;
end 
// expected READ_VALUE[ 47 ]
initial
begin
	READ_VALUE_expected[47] = 1'bX;
	READ_VALUE_expected[47] = #99000 1'b0;
end 
// expected READ_VALUE[ 46 ]
initial
begin
	READ_VALUE_expected[46] = 1'bX;
	READ_VALUE_expected[46] = #99000 1'b0;
end 
// expected READ_VALUE[ 45 ]
initial
begin
	READ_VALUE_expected[45] = 1'bX;
	READ_VALUE_expected[45] = #99000 1'b0;
end 
// expected READ_VALUE[ 44 ]
initial
begin
	READ_VALUE_expected[44] = 1'bX;
	READ_VALUE_expected[44] = #99000 1'b0;
end 
// expected READ_VALUE[ 43 ]
initial
begin
	READ_VALUE_expected[43] = 1'bX;
	READ_VALUE_expected[43] = #99000 1'b0;
end 
// expected READ_VALUE[ 42 ]
initial
begin
	READ_VALUE_expected[42] = 1'bX;
	READ_VALUE_expected[42] = #99000 1'b0;
end 
// expected READ_VALUE[ 41 ]
initial
begin
	READ_VALUE_expected[41] = 1'bX;
	READ_VALUE_expected[41] = #99000 1'b0;
end 
// expected READ_VALUE[ 40 ]
initial
begin
	READ_VALUE_expected[40] = 1'bX;
	READ_VALUE_expected[40] = #99000 1'b0;
end 
// expected READ_VALUE[ 39 ]
initial
begin
	READ_VALUE_expected[39] = 1'bX;
	READ_VALUE_expected[39] = #99000 1'b0;
end 
// expected READ_VALUE[ 38 ]
initial
begin
	READ_VALUE_expected[38] = 1'bX;
	READ_VALUE_expected[38] = #99000 1'b0;
end 
// expected READ_VALUE[ 37 ]
initial
begin
	READ_VALUE_expected[37] = 1'bX;
	READ_VALUE_expected[37] = #99000 1'b0;
end 
// expected READ_VALUE[ 36 ]
initial
begin
	READ_VALUE_expected[36] = 1'bX;
	READ_VALUE_expected[36] = #99000 1'b0;
end 
// expected READ_VALUE[ 35 ]
initial
begin
	READ_VALUE_expected[35] = 1'bX;
	READ_VALUE_expected[35] = #99000 1'b0;
end 
// expected READ_VALUE[ 34 ]
initial
begin
	READ_VALUE_expected[34] = 1'bX;
	READ_VALUE_expected[34] = #99000 1'b0;
end 
// expected READ_VALUE[ 33 ]
initial
begin
	READ_VALUE_expected[33] = 1'bX;
	READ_VALUE_expected[33] = #99000 1'b0;
end 
// expected READ_VALUE[ 32 ]
initial
begin
	READ_VALUE_expected[32] = 1'bX;
	READ_VALUE_expected[32] = #99000 1'b0;
end 
// expected READ_VALUE[ 31 ]
initial
begin
	READ_VALUE_expected[31] = 1'bX;
	READ_VALUE_expected[31] = #99000 1'b0;
end 
// expected READ_VALUE[ 30 ]
initial
begin
	READ_VALUE_expected[30] = 1'bX;
	READ_VALUE_expected[30] = #99000 1'b0;
end 
// expected READ_VALUE[ 29 ]
initial
begin
	READ_VALUE_expected[29] = 1'bX;
	READ_VALUE_expected[29] = #99000 1'b0;
end 
// expected READ_VALUE[ 28 ]
initial
begin
	READ_VALUE_expected[28] = 1'bX;
	READ_VALUE_expected[28] = #99000 1'b0;
end 
// expected READ_VALUE[ 27 ]
initial
begin
	READ_VALUE_expected[27] = 1'bX;
	READ_VALUE_expected[27] = #99000 1'b0;
end 
// expected READ_VALUE[ 26 ]
initial
begin
	READ_VALUE_expected[26] = 1'bX;
	READ_VALUE_expected[26] = #99000 1'b0;
end 
// expected READ_VALUE[ 25 ]
initial
begin
	READ_VALUE_expected[25] = 1'bX;
	READ_VALUE_expected[25] = #99000 1'b0;
end 
// expected READ_VALUE[ 24 ]
initial
begin
	READ_VALUE_expected[24] = 1'bX;
	READ_VALUE_expected[24] = #99000 1'b0;
end 
// expected READ_VALUE[ 23 ]
initial
begin
	READ_VALUE_expected[23] = 1'bX;
	READ_VALUE_expected[23] = #99000 1'b0;
end 
// expected READ_VALUE[ 22 ]
initial
begin
	READ_VALUE_expected[22] = 1'bX;
	READ_VALUE_expected[22] = #99000 1'b0;
end 
// expected READ_VALUE[ 21 ]
initial
begin
	READ_VALUE_expected[21] = 1'bX;
	READ_VALUE_expected[21] = #99000 1'b0;
end 
// expected READ_VALUE[ 20 ]
initial
begin
	READ_VALUE_expected[20] = 1'bX;
	READ_VALUE_expected[20] = #99000 1'b0;
end 
// expected READ_VALUE[ 19 ]
initial
begin
	READ_VALUE_expected[19] = 1'bX;
	READ_VALUE_expected[19] = #99000 1'b0;
end 
// expected READ_VALUE[ 18 ]
initial
begin
	READ_VALUE_expected[18] = 1'bX;
	READ_VALUE_expected[18] = #99000 1'b0;
end 
// expected READ_VALUE[ 17 ]
initial
begin
	READ_VALUE_expected[17] = 1'bX;
	READ_VALUE_expected[17] = #99000 1'b0;
end 
// expected READ_VALUE[ 16 ]
initial
begin
	READ_VALUE_expected[16] = 1'bX;
	READ_VALUE_expected[16] = #99000 1'b0;
end 
// expected READ_VALUE[ 15 ]
initial
begin
	READ_VALUE_expected[15] = 1'bX;
	READ_VALUE_expected[15] = #99000 1'b0;
end 
// expected READ_VALUE[ 14 ]
initial
begin
	READ_VALUE_expected[14] = 1'bX;
	READ_VALUE_expected[14] = #99000 1'b0;
end 
// expected READ_VALUE[ 13 ]
initial
begin
	READ_VALUE_expected[13] = 1'bX;
	READ_VALUE_expected[13] = #99000 1'b0;
end 
// expected READ_VALUE[ 12 ]
initial
begin
	READ_VALUE_expected[12] = 1'bX;
	READ_VALUE_expected[12] = #99000 1'b0;
end 
// expected READ_VALUE[ 11 ]
initial
begin
	READ_VALUE_expected[11] = 1'bX;
	READ_VALUE_expected[11] = #99000 1'b0;
end 
// expected READ_VALUE[ 10 ]
initial
begin
	READ_VALUE_expected[10] = 1'bX;
	READ_VALUE_expected[10] = #99000 1'b0;
end 
// expected READ_VALUE[ 9 ]
initial
begin
	READ_VALUE_expected[9] = 1'bX;
	READ_VALUE_expected[9] = #99000 1'b0;
end 
// expected READ_VALUE[ 8 ]
initial
begin
	READ_VALUE_expected[8] = 1'bX;
	READ_VALUE_expected[8] = #99000 1'b0;
end 
// expected READ_VALUE[ 7 ]
initial
begin
	READ_VALUE_expected[7] = 1'bX;
	READ_VALUE_expected[7] = #99000 1'b0;
end 
// expected READ_VALUE[ 6 ]
initial
begin
	READ_VALUE_expected[6] = 1'bX;
	READ_VALUE_expected[6] = #99000 1'b0;
end 
// expected READ_VALUE[ 5 ]
initial
begin
	READ_VALUE_expected[5] = 1'bX;
	READ_VALUE_expected[5] = #99000 1'b0;
end 
// expected READ_VALUE[ 4 ]
initial
begin
	READ_VALUE_expected[4] = 1'bX;
	READ_VALUE_expected[4] = #99000 1'b0;
end 
// expected READ_VALUE[ 3 ]
initial
begin
	READ_VALUE_expected[3] = 1'bX;
	READ_VALUE_expected[3] = #99000 1'b0;
end 
// expected READ_VALUE[ 2 ]
initial
begin
	READ_VALUE_expected[2] = 1'bX;
	READ_VALUE_expected[2] = #99000 1'b0;
end 
// expected READ_VALUE[ 1 ]
initial
begin
	READ_VALUE_expected[1] = 1'bX;
	READ_VALUE_expected[1] = #99000 1'b0;
end 
// expected READ_VALUE[ 0 ]
initial
begin
	READ_VALUE_expected[0] = 1'bX;
	READ_VALUE_expected[0] = #99000 1'b0;
end 
// generate trigger
always @(ADDRESS_expected or ADDRESS or CURRENT_PC_expected or CURRENT_PC or LOOK_expected or LOOK or PROBE_expected or PROBE or READ_VALUE_expected or READ_VALUE)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ADDRESS = %b | expected CURRENT_PC = %b | expected LOOK = %b | expected PROBE = %b | expected READ_VALUE = %b | ",ADDRESS_expected_prev,CURRENT_PC_expected_prev,LOOK_expected_prev,PROBE_expected_prev,READ_VALUE_expected_prev);
	$display("| real ADDRESS = %b | real CURRENT_PC = %b | real LOOK = %b | real PROBE = %b | real READ_VALUE = %b | ",ADDRESS_prev,CURRENT_PC_prev,LOOK_prev,PROBE_prev,READ_VALUE_prev);
`endif
	if (
		( ADDRESS_expected_prev[0] !== 1'bx ) && ( ADDRESS_prev[0] !== ADDRESS_expected_prev[0] )
		&& ((ADDRESS_expected_prev[0] !== last_ADDRESS_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[0] = ADDRESS_expected_prev[0];
	end
	if (
		( ADDRESS_expected_prev[1] !== 1'bx ) && ( ADDRESS_prev[1] !== ADDRESS_expected_prev[1] )
		&& ((ADDRESS_expected_prev[1] !== last_ADDRESS_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[1] = ADDRESS_expected_prev[1];
	end
	if (
		( ADDRESS_expected_prev[2] !== 1'bx ) && ( ADDRESS_prev[2] !== ADDRESS_expected_prev[2] )
		&& ((ADDRESS_expected_prev[2] !== last_ADDRESS_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[2] = ADDRESS_expected_prev[2];
	end
	if (
		( ADDRESS_expected_prev[3] !== 1'bx ) && ( ADDRESS_prev[3] !== ADDRESS_expected_prev[3] )
		&& ((ADDRESS_expected_prev[3] !== last_ADDRESS_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[3] = ADDRESS_expected_prev[3];
	end
	if (
		( ADDRESS_expected_prev[4] !== 1'bx ) && ( ADDRESS_prev[4] !== ADDRESS_expected_prev[4] )
		&& ((ADDRESS_expected_prev[4] !== last_ADDRESS_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[4] = ADDRESS_expected_prev[4];
	end
	if (
		( ADDRESS_expected_prev[5] !== 1'bx ) && ( ADDRESS_prev[5] !== ADDRESS_expected_prev[5] )
		&& ((ADDRESS_expected_prev[5] !== last_ADDRESS_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[5] = ADDRESS_expected_prev[5];
	end
	if (
		( ADDRESS_expected_prev[6] !== 1'bx ) && ( ADDRESS_prev[6] !== ADDRESS_expected_prev[6] )
		&& ((ADDRESS_expected_prev[6] !== last_ADDRESS_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[6] = ADDRESS_expected_prev[6];
	end
	if (
		( ADDRESS_expected_prev[7] !== 1'bx ) && ( ADDRESS_prev[7] !== ADDRESS_expected_prev[7] )
		&& ((ADDRESS_expected_prev[7] !== last_ADDRESS_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[7] = ADDRESS_expected_prev[7];
	end
	if (
		( ADDRESS_expected_prev[8] !== 1'bx ) && ( ADDRESS_prev[8] !== ADDRESS_expected_prev[8] )
		&& ((ADDRESS_expected_prev[8] !== last_ADDRESS_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[8] = ADDRESS_expected_prev[8];
	end
	if (
		( ADDRESS_expected_prev[9] !== 1'bx ) && ( ADDRESS_prev[9] !== ADDRESS_expected_prev[9] )
		&& ((ADDRESS_expected_prev[9] !== last_ADDRESS_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[9] = ADDRESS_expected_prev[9];
	end
	if (
		( ADDRESS_expected_prev[10] !== 1'bx ) && ( ADDRESS_prev[10] !== ADDRESS_expected_prev[10] )
		&& ((ADDRESS_expected_prev[10] !== last_ADDRESS_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[10] = ADDRESS_expected_prev[10];
	end
	if (
		( ADDRESS_expected_prev[11] !== 1'bx ) && ( ADDRESS_prev[11] !== ADDRESS_expected_prev[11] )
		&& ((ADDRESS_expected_prev[11] !== last_ADDRESS_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[11] = ADDRESS_expected_prev[11];
	end
	if (
		( ADDRESS_expected_prev[12] !== 1'bx ) && ( ADDRESS_prev[12] !== ADDRESS_expected_prev[12] )
		&& ((ADDRESS_expected_prev[12] !== last_ADDRESS_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[12] = ADDRESS_expected_prev[12];
	end
	if (
		( ADDRESS_expected_prev[13] !== 1'bx ) && ( ADDRESS_prev[13] !== ADDRESS_expected_prev[13] )
		&& ((ADDRESS_expected_prev[13] !== last_ADDRESS_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[13] = ADDRESS_expected_prev[13];
	end
	if (
		( ADDRESS_expected_prev[14] !== 1'bx ) && ( ADDRESS_prev[14] !== ADDRESS_expected_prev[14] )
		&& ((ADDRESS_expected_prev[14] !== last_ADDRESS_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[14] = ADDRESS_expected_prev[14];
	end
	if (
		( ADDRESS_expected_prev[15] !== 1'bx ) && ( ADDRESS_prev[15] !== ADDRESS_expected_prev[15] )
		&& ((ADDRESS_expected_prev[15] !== last_ADDRESS_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[15] = ADDRESS_expected_prev[15];
	end
	if (
		( ADDRESS_expected_prev[16] !== 1'bx ) && ( ADDRESS_prev[16] !== ADDRESS_expected_prev[16] )
		&& ((ADDRESS_expected_prev[16] !== last_ADDRESS_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[16] = ADDRESS_expected_prev[16];
	end
	if (
		( ADDRESS_expected_prev[17] !== 1'bx ) && ( ADDRESS_prev[17] !== ADDRESS_expected_prev[17] )
		&& ((ADDRESS_expected_prev[17] !== last_ADDRESS_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[17] = ADDRESS_expected_prev[17];
	end
	if (
		( ADDRESS_expected_prev[18] !== 1'bx ) && ( ADDRESS_prev[18] !== ADDRESS_expected_prev[18] )
		&& ((ADDRESS_expected_prev[18] !== last_ADDRESS_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[18] = ADDRESS_expected_prev[18];
	end
	if (
		( ADDRESS_expected_prev[19] !== 1'bx ) && ( ADDRESS_prev[19] !== ADDRESS_expected_prev[19] )
		&& ((ADDRESS_expected_prev[19] !== last_ADDRESS_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[19] = ADDRESS_expected_prev[19];
	end
	if (
		( ADDRESS_expected_prev[20] !== 1'bx ) && ( ADDRESS_prev[20] !== ADDRESS_expected_prev[20] )
		&& ((ADDRESS_expected_prev[20] !== last_ADDRESS_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[20] = ADDRESS_expected_prev[20];
	end
	if (
		( ADDRESS_expected_prev[21] !== 1'bx ) && ( ADDRESS_prev[21] !== ADDRESS_expected_prev[21] )
		&& ((ADDRESS_expected_prev[21] !== last_ADDRESS_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[21] = ADDRESS_expected_prev[21];
	end
	if (
		( ADDRESS_expected_prev[22] !== 1'bx ) && ( ADDRESS_prev[22] !== ADDRESS_expected_prev[22] )
		&& ((ADDRESS_expected_prev[22] !== last_ADDRESS_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[22] = ADDRESS_expected_prev[22];
	end
	if (
		( ADDRESS_expected_prev[23] !== 1'bx ) && ( ADDRESS_prev[23] !== ADDRESS_expected_prev[23] )
		&& ((ADDRESS_expected_prev[23] !== last_ADDRESS_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[23] = ADDRESS_expected_prev[23];
	end
	if (
		( ADDRESS_expected_prev[24] !== 1'bx ) && ( ADDRESS_prev[24] !== ADDRESS_expected_prev[24] )
		&& ((ADDRESS_expected_prev[24] !== last_ADDRESS_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[24] = ADDRESS_expected_prev[24];
	end
	if (
		( ADDRESS_expected_prev[25] !== 1'bx ) && ( ADDRESS_prev[25] !== ADDRESS_expected_prev[25] )
		&& ((ADDRESS_expected_prev[25] !== last_ADDRESS_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[25] = ADDRESS_expected_prev[25];
	end
	if (
		( ADDRESS_expected_prev[26] !== 1'bx ) && ( ADDRESS_prev[26] !== ADDRESS_expected_prev[26] )
		&& ((ADDRESS_expected_prev[26] !== last_ADDRESS_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[26] = ADDRESS_expected_prev[26];
	end
	if (
		( ADDRESS_expected_prev[27] !== 1'bx ) && ( ADDRESS_prev[27] !== ADDRESS_expected_prev[27] )
		&& ((ADDRESS_expected_prev[27] !== last_ADDRESS_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[27] = ADDRESS_expected_prev[27];
	end
	if (
		( ADDRESS_expected_prev[28] !== 1'bx ) && ( ADDRESS_prev[28] !== ADDRESS_expected_prev[28] )
		&& ((ADDRESS_expected_prev[28] !== last_ADDRESS_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[28] = ADDRESS_expected_prev[28];
	end
	if (
		( ADDRESS_expected_prev[29] !== 1'bx ) && ( ADDRESS_prev[29] !== ADDRESS_expected_prev[29] )
		&& ((ADDRESS_expected_prev[29] !== last_ADDRESS_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[29] = ADDRESS_expected_prev[29];
	end
	if (
		( ADDRESS_expected_prev[30] !== 1'bx ) && ( ADDRESS_prev[30] !== ADDRESS_expected_prev[30] )
		&& ((ADDRESS_expected_prev[30] !== last_ADDRESS_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[30] = ADDRESS_expected_prev[30];
	end
	if (
		( ADDRESS_expected_prev[31] !== 1'bx ) && ( ADDRESS_prev[31] !== ADDRESS_expected_prev[31] )
		&& ((ADDRESS_expected_prev[31] !== last_ADDRESS_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[31] = ADDRESS_expected_prev[31];
	end
	if (
		( ADDRESS_expected_prev[32] !== 1'bx ) && ( ADDRESS_prev[32] !== ADDRESS_expected_prev[32] )
		&& ((ADDRESS_expected_prev[32] !== last_ADDRESS_exp[32]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[32] = ADDRESS_expected_prev[32];
	end
	if (
		( ADDRESS_expected_prev[33] !== 1'bx ) && ( ADDRESS_prev[33] !== ADDRESS_expected_prev[33] )
		&& ((ADDRESS_expected_prev[33] !== last_ADDRESS_exp[33]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[33] = ADDRESS_expected_prev[33];
	end
	if (
		( ADDRESS_expected_prev[34] !== 1'bx ) && ( ADDRESS_prev[34] !== ADDRESS_expected_prev[34] )
		&& ((ADDRESS_expected_prev[34] !== last_ADDRESS_exp[34]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[34] = ADDRESS_expected_prev[34];
	end
	if (
		( ADDRESS_expected_prev[35] !== 1'bx ) && ( ADDRESS_prev[35] !== ADDRESS_expected_prev[35] )
		&& ((ADDRESS_expected_prev[35] !== last_ADDRESS_exp[35]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[35] = ADDRESS_expected_prev[35];
	end
	if (
		( ADDRESS_expected_prev[36] !== 1'bx ) && ( ADDRESS_prev[36] !== ADDRESS_expected_prev[36] )
		&& ((ADDRESS_expected_prev[36] !== last_ADDRESS_exp[36]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[36] = ADDRESS_expected_prev[36];
	end
	if (
		( ADDRESS_expected_prev[37] !== 1'bx ) && ( ADDRESS_prev[37] !== ADDRESS_expected_prev[37] )
		&& ((ADDRESS_expected_prev[37] !== last_ADDRESS_exp[37]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[37] = ADDRESS_expected_prev[37];
	end
	if (
		( ADDRESS_expected_prev[38] !== 1'bx ) && ( ADDRESS_prev[38] !== ADDRESS_expected_prev[38] )
		&& ((ADDRESS_expected_prev[38] !== last_ADDRESS_exp[38]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[38] = ADDRESS_expected_prev[38];
	end
	if (
		( ADDRESS_expected_prev[39] !== 1'bx ) && ( ADDRESS_prev[39] !== ADDRESS_expected_prev[39] )
		&& ((ADDRESS_expected_prev[39] !== last_ADDRESS_exp[39]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[39] = ADDRESS_expected_prev[39];
	end
	if (
		( ADDRESS_expected_prev[40] !== 1'bx ) && ( ADDRESS_prev[40] !== ADDRESS_expected_prev[40] )
		&& ((ADDRESS_expected_prev[40] !== last_ADDRESS_exp[40]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[40] = ADDRESS_expected_prev[40];
	end
	if (
		( ADDRESS_expected_prev[41] !== 1'bx ) && ( ADDRESS_prev[41] !== ADDRESS_expected_prev[41] )
		&& ((ADDRESS_expected_prev[41] !== last_ADDRESS_exp[41]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[41] = ADDRESS_expected_prev[41];
	end
	if (
		( ADDRESS_expected_prev[42] !== 1'bx ) && ( ADDRESS_prev[42] !== ADDRESS_expected_prev[42] )
		&& ((ADDRESS_expected_prev[42] !== last_ADDRESS_exp[42]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[42] = ADDRESS_expected_prev[42];
	end
	if (
		( ADDRESS_expected_prev[43] !== 1'bx ) && ( ADDRESS_prev[43] !== ADDRESS_expected_prev[43] )
		&& ((ADDRESS_expected_prev[43] !== last_ADDRESS_exp[43]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[43] = ADDRESS_expected_prev[43];
	end
	if (
		( ADDRESS_expected_prev[44] !== 1'bx ) && ( ADDRESS_prev[44] !== ADDRESS_expected_prev[44] )
		&& ((ADDRESS_expected_prev[44] !== last_ADDRESS_exp[44]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[44] = ADDRESS_expected_prev[44];
	end
	if (
		( ADDRESS_expected_prev[45] !== 1'bx ) && ( ADDRESS_prev[45] !== ADDRESS_expected_prev[45] )
		&& ((ADDRESS_expected_prev[45] !== last_ADDRESS_exp[45]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[45] = ADDRESS_expected_prev[45];
	end
	if (
		( ADDRESS_expected_prev[46] !== 1'bx ) && ( ADDRESS_prev[46] !== ADDRESS_expected_prev[46] )
		&& ((ADDRESS_expected_prev[46] !== last_ADDRESS_exp[46]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[46] = ADDRESS_expected_prev[46];
	end
	if (
		( ADDRESS_expected_prev[47] !== 1'bx ) && ( ADDRESS_prev[47] !== ADDRESS_expected_prev[47] )
		&& ((ADDRESS_expected_prev[47] !== last_ADDRESS_exp[47]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[47] = ADDRESS_expected_prev[47];
	end
	if (
		( ADDRESS_expected_prev[48] !== 1'bx ) && ( ADDRESS_prev[48] !== ADDRESS_expected_prev[48] )
		&& ((ADDRESS_expected_prev[48] !== last_ADDRESS_exp[48]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[48] = ADDRESS_expected_prev[48];
	end
	if (
		( ADDRESS_expected_prev[49] !== 1'bx ) && ( ADDRESS_prev[49] !== ADDRESS_expected_prev[49] )
		&& ((ADDRESS_expected_prev[49] !== last_ADDRESS_exp[49]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[49] = ADDRESS_expected_prev[49];
	end
	if (
		( ADDRESS_expected_prev[50] !== 1'bx ) && ( ADDRESS_prev[50] !== ADDRESS_expected_prev[50] )
		&& ((ADDRESS_expected_prev[50] !== last_ADDRESS_exp[50]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[50] = ADDRESS_expected_prev[50];
	end
	if (
		( ADDRESS_expected_prev[51] !== 1'bx ) && ( ADDRESS_prev[51] !== ADDRESS_expected_prev[51] )
		&& ((ADDRESS_expected_prev[51] !== last_ADDRESS_exp[51]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[51] = ADDRESS_expected_prev[51];
	end
	if (
		( ADDRESS_expected_prev[52] !== 1'bx ) && ( ADDRESS_prev[52] !== ADDRESS_expected_prev[52] )
		&& ((ADDRESS_expected_prev[52] !== last_ADDRESS_exp[52]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[52] = ADDRESS_expected_prev[52];
	end
	if (
		( ADDRESS_expected_prev[53] !== 1'bx ) && ( ADDRESS_prev[53] !== ADDRESS_expected_prev[53] )
		&& ((ADDRESS_expected_prev[53] !== last_ADDRESS_exp[53]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[53] = ADDRESS_expected_prev[53];
	end
	if (
		( ADDRESS_expected_prev[54] !== 1'bx ) && ( ADDRESS_prev[54] !== ADDRESS_expected_prev[54] )
		&& ((ADDRESS_expected_prev[54] !== last_ADDRESS_exp[54]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[54] = ADDRESS_expected_prev[54];
	end
	if (
		( ADDRESS_expected_prev[55] !== 1'bx ) && ( ADDRESS_prev[55] !== ADDRESS_expected_prev[55] )
		&& ((ADDRESS_expected_prev[55] !== last_ADDRESS_exp[55]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[55] = ADDRESS_expected_prev[55];
	end
	if (
		( ADDRESS_expected_prev[56] !== 1'bx ) && ( ADDRESS_prev[56] !== ADDRESS_expected_prev[56] )
		&& ((ADDRESS_expected_prev[56] !== last_ADDRESS_exp[56]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[56] = ADDRESS_expected_prev[56];
	end
	if (
		( ADDRESS_expected_prev[57] !== 1'bx ) && ( ADDRESS_prev[57] !== ADDRESS_expected_prev[57] )
		&& ((ADDRESS_expected_prev[57] !== last_ADDRESS_exp[57]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[57] = ADDRESS_expected_prev[57];
	end
	if (
		( ADDRESS_expected_prev[58] !== 1'bx ) && ( ADDRESS_prev[58] !== ADDRESS_expected_prev[58] )
		&& ((ADDRESS_expected_prev[58] !== last_ADDRESS_exp[58]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[58] = ADDRESS_expected_prev[58];
	end
	if (
		( ADDRESS_expected_prev[59] !== 1'bx ) && ( ADDRESS_prev[59] !== ADDRESS_expected_prev[59] )
		&& ((ADDRESS_expected_prev[59] !== last_ADDRESS_exp[59]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[59] = ADDRESS_expected_prev[59];
	end
	if (
		( ADDRESS_expected_prev[60] !== 1'bx ) && ( ADDRESS_prev[60] !== ADDRESS_expected_prev[60] )
		&& ((ADDRESS_expected_prev[60] !== last_ADDRESS_exp[60]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[60] = ADDRESS_expected_prev[60];
	end
	if (
		( ADDRESS_expected_prev[61] !== 1'bx ) && ( ADDRESS_prev[61] !== ADDRESS_expected_prev[61] )
		&& ((ADDRESS_expected_prev[61] !== last_ADDRESS_exp[61]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[61] = ADDRESS_expected_prev[61];
	end
	if (
		( ADDRESS_expected_prev[62] !== 1'bx ) && ( ADDRESS_prev[62] !== ADDRESS_expected_prev[62] )
		&& ((ADDRESS_expected_prev[62] !== last_ADDRESS_exp[62]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[62] = ADDRESS_expected_prev[62];
	end
	if (
		( ADDRESS_expected_prev[63] !== 1'bx ) && ( ADDRESS_prev[63] !== ADDRESS_expected_prev[63] )
		&& ((ADDRESS_expected_prev[63] !== last_ADDRESS_exp[63]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADDRESS[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADDRESS_expected_prev);
		$display ("     Real value = %b", ADDRESS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADDRESS_exp[63] = ADDRESS_expected_prev[63];
	end
	if (
		( CURRENT_PC_expected_prev[0] !== 1'bx ) && ( CURRENT_PC_prev[0] !== CURRENT_PC_expected_prev[0] )
		&& ((CURRENT_PC_expected_prev[0] !== last_CURRENT_PC_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[0] = CURRENT_PC_expected_prev[0];
	end
	if (
		( CURRENT_PC_expected_prev[1] !== 1'bx ) && ( CURRENT_PC_prev[1] !== CURRENT_PC_expected_prev[1] )
		&& ((CURRENT_PC_expected_prev[1] !== last_CURRENT_PC_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[1] = CURRENT_PC_expected_prev[1];
	end
	if (
		( CURRENT_PC_expected_prev[2] !== 1'bx ) && ( CURRENT_PC_prev[2] !== CURRENT_PC_expected_prev[2] )
		&& ((CURRENT_PC_expected_prev[2] !== last_CURRENT_PC_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[2] = CURRENT_PC_expected_prev[2];
	end
	if (
		( CURRENT_PC_expected_prev[3] !== 1'bx ) && ( CURRENT_PC_prev[3] !== CURRENT_PC_expected_prev[3] )
		&& ((CURRENT_PC_expected_prev[3] !== last_CURRENT_PC_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[3] = CURRENT_PC_expected_prev[3];
	end
	if (
		( CURRENT_PC_expected_prev[4] !== 1'bx ) && ( CURRENT_PC_prev[4] !== CURRENT_PC_expected_prev[4] )
		&& ((CURRENT_PC_expected_prev[4] !== last_CURRENT_PC_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[4] = CURRENT_PC_expected_prev[4];
	end
	if (
		( CURRENT_PC_expected_prev[5] !== 1'bx ) && ( CURRENT_PC_prev[5] !== CURRENT_PC_expected_prev[5] )
		&& ((CURRENT_PC_expected_prev[5] !== last_CURRENT_PC_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[5] = CURRENT_PC_expected_prev[5];
	end
	if (
		( CURRENT_PC_expected_prev[6] !== 1'bx ) && ( CURRENT_PC_prev[6] !== CURRENT_PC_expected_prev[6] )
		&& ((CURRENT_PC_expected_prev[6] !== last_CURRENT_PC_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[6] = CURRENT_PC_expected_prev[6];
	end
	if (
		( CURRENT_PC_expected_prev[7] !== 1'bx ) && ( CURRENT_PC_prev[7] !== CURRENT_PC_expected_prev[7] )
		&& ((CURRENT_PC_expected_prev[7] !== last_CURRENT_PC_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[7] = CURRENT_PC_expected_prev[7];
	end
	if (
		( CURRENT_PC_expected_prev[8] !== 1'bx ) && ( CURRENT_PC_prev[8] !== CURRENT_PC_expected_prev[8] )
		&& ((CURRENT_PC_expected_prev[8] !== last_CURRENT_PC_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[8] = CURRENT_PC_expected_prev[8];
	end
	if (
		( CURRENT_PC_expected_prev[9] !== 1'bx ) && ( CURRENT_PC_prev[9] !== CURRENT_PC_expected_prev[9] )
		&& ((CURRENT_PC_expected_prev[9] !== last_CURRENT_PC_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[9] = CURRENT_PC_expected_prev[9];
	end
	if (
		( CURRENT_PC_expected_prev[10] !== 1'bx ) && ( CURRENT_PC_prev[10] !== CURRENT_PC_expected_prev[10] )
		&& ((CURRENT_PC_expected_prev[10] !== last_CURRENT_PC_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[10] = CURRENT_PC_expected_prev[10];
	end
	if (
		( CURRENT_PC_expected_prev[11] !== 1'bx ) && ( CURRENT_PC_prev[11] !== CURRENT_PC_expected_prev[11] )
		&& ((CURRENT_PC_expected_prev[11] !== last_CURRENT_PC_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[11] = CURRENT_PC_expected_prev[11];
	end
	if (
		( CURRENT_PC_expected_prev[12] !== 1'bx ) && ( CURRENT_PC_prev[12] !== CURRENT_PC_expected_prev[12] )
		&& ((CURRENT_PC_expected_prev[12] !== last_CURRENT_PC_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[12] = CURRENT_PC_expected_prev[12];
	end
	if (
		( CURRENT_PC_expected_prev[13] !== 1'bx ) && ( CURRENT_PC_prev[13] !== CURRENT_PC_expected_prev[13] )
		&& ((CURRENT_PC_expected_prev[13] !== last_CURRENT_PC_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[13] = CURRENT_PC_expected_prev[13];
	end
	if (
		( CURRENT_PC_expected_prev[14] !== 1'bx ) && ( CURRENT_PC_prev[14] !== CURRENT_PC_expected_prev[14] )
		&& ((CURRENT_PC_expected_prev[14] !== last_CURRENT_PC_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[14] = CURRENT_PC_expected_prev[14];
	end
	if (
		( CURRENT_PC_expected_prev[15] !== 1'bx ) && ( CURRENT_PC_prev[15] !== CURRENT_PC_expected_prev[15] )
		&& ((CURRENT_PC_expected_prev[15] !== last_CURRENT_PC_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[15] = CURRENT_PC_expected_prev[15];
	end
	if (
		( CURRENT_PC_expected_prev[16] !== 1'bx ) && ( CURRENT_PC_prev[16] !== CURRENT_PC_expected_prev[16] )
		&& ((CURRENT_PC_expected_prev[16] !== last_CURRENT_PC_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[16] = CURRENT_PC_expected_prev[16];
	end
	if (
		( CURRENT_PC_expected_prev[17] !== 1'bx ) && ( CURRENT_PC_prev[17] !== CURRENT_PC_expected_prev[17] )
		&& ((CURRENT_PC_expected_prev[17] !== last_CURRENT_PC_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[17] = CURRENT_PC_expected_prev[17];
	end
	if (
		( CURRENT_PC_expected_prev[18] !== 1'bx ) && ( CURRENT_PC_prev[18] !== CURRENT_PC_expected_prev[18] )
		&& ((CURRENT_PC_expected_prev[18] !== last_CURRENT_PC_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[18] = CURRENT_PC_expected_prev[18];
	end
	if (
		( CURRENT_PC_expected_prev[19] !== 1'bx ) && ( CURRENT_PC_prev[19] !== CURRENT_PC_expected_prev[19] )
		&& ((CURRENT_PC_expected_prev[19] !== last_CURRENT_PC_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[19] = CURRENT_PC_expected_prev[19];
	end
	if (
		( CURRENT_PC_expected_prev[20] !== 1'bx ) && ( CURRENT_PC_prev[20] !== CURRENT_PC_expected_prev[20] )
		&& ((CURRENT_PC_expected_prev[20] !== last_CURRENT_PC_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[20] = CURRENT_PC_expected_prev[20];
	end
	if (
		( CURRENT_PC_expected_prev[21] !== 1'bx ) && ( CURRENT_PC_prev[21] !== CURRENT_PC_expected_prev[21] )
		&& ((CURRENT_PC_expected_prev[21] !== last_CURRENT_PC_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[21] = CURRENT_PC_expected_prev[21];
	end
	if (
		( CURRENT_PC_expected_prev[22] !== 1'bx ) && ( CURRENT_PC_prev[22] !== CURRENT_PC_expected_prev[22] )
		&& ((CURRENT_PC_expected_prev[22] !== last_CURRENT_PC_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[22] = CURRENT_PC_expected_prev[22];
	end
	if (
		( CURRENT_PC_expected_prev[23] !== 1'bx ) && ( CURRENT_PC_prev[23] !== CURRENT_PC_expected_prev[23] )
		&& ((CURRENT_PC_expected_prev[23] !== last_CURRENT_PC_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[23] = CURRENT_PC_expected_prev[23];
	end
	if (
		( CURRENT_PC_expected_prev[24] !== 1'bx ) && ( CURRENT_PC_prev[24] !== CURRENT_PC_expected_prev[24] )
		&& ((CURRENT_PC_expected_prev[24] !== last_CURRENT_PC_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[24] = CURRENT_PC_expected_prev[24];
	end
	if (
		( CURRENT_PC_expected_prev[25] !== 1'bx ) && ( CURRENT_PC_prev[25] !== CURRENT_PC_expected_prev[25] )
		&& ((CURRENT_PC_expected_prev[25] !== last_CURRENT_PC_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[25] = CURRENT_PC_expected_prev[25];
	end
	if (
		( CURRENT_PC_expected_prev[26] !== 1'bx ) && ( CURRENT_PC_prev[26] !== CURRENT_PC_expected_prev[26] )
		&& ((CURRENT_PC_expected_prev[26] !== last_CURRENT_PC_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[26] = CURRENT_PC_expected_prev[26];
	end
	if (
		( CURRENT_PC_expected_prev[27] !== 1'bx ) && ( CURRENT_PC_prev[27] !== CURRENT_PC_expected_prev[27] )
		&& ((CURRENT_PC_expected_prev[27] !== last_CURRENT_PC_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[27] = CURRENT_PC_expected_prev[27];
	end
	if (
		( CURRENT_PC_expected_prev[28] !== 1'bx ) && ( CURRENT_PC_prev[28] !== CURRENT_PC_expected_prev[28] )
		&& ((CURRENT_PC_expected_prev[28] !== last_CURRENT_PC_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[28] = CURRENT_PC_expected_prev[28];
	end
	if (
		( CURRENT_PC_expected_prev[29] !== 1'bx ) && ( CURRENT_PC_prev[29] !== CURRENT_PC_expected_prev[29] )
		&& ((CURRENT_PC_expected_prev[29] !== last_CURRENT_PC_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[29] = CURRENT_PC_expected_prev[29];
	end
	if (
		( CURRENT_PC_expected_prev[30] !== 1'bx ) && ( CURRENT_PC_prev[30] !== CURRENT_PC_expected_prev[30] )
		&& ((CURRENT_PC_expected_prev[30] !== last_CURRENT_PC_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[30] = CURRENT_PC_expected_prev[30];
	end
	if (
		( CURRENT_PC_expected_prev[31] !== 1'bx ) && ( CURRENT_PC_prev[31] !== CURRENT_PC_expected_prev[31] )
		&& ((CURRENT_PC_expected_prev[31] !== last_CURRENT_PC_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[31] = CURRENT_PC_expected_prev[31];
	end
	if (
		( CURRENT_PC_expected_prev[32] !== 1'bx ) && ( CURRENT_PC_prev[32] !== CURRENT_PC_expected_prev[32] )
		&& ((CURRENT_PC_expected_prev[32] !== last_CURRENT_PC_exp[32]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[32] = CURRENT_PC_expected_prev[32];
	end
	if (
		( CURRENT_PC_expected_prev[33] !== 1'bx ) && ( CURRENT_PC_prev[33] !== CURRENT_PC_expected_prev[33] )
		&& ((CURRENT_PC_expected_prev[33] !== last_CURRENT_PC_exp[33]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[33] = CURRENT_PC_expected_prev[33];
	end
	if (
		( CURRENT_PC_expected_prev[34] !== 1'bx ) && ( CURRENT_PC_prev[34] !== CURRENT_PC_expected_prev[34] )
		&& ((CURRENT_PC_expected_prev[34] !== last_CURRENT_PC_exp[34]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[34] = CURRENT_PC_expected_prev[34];
	end
	if (
		( CURRENT_PC_expected_prev[35] !== 1'bx ) && ( CURRENT_PC_prev[35] !== CURRENT_PC_expected_prev[35] )
		&& ((CURRENT_PC_expected_prev[35] !== last_CURRENT_PC_exp[35]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[35] = CURRENT_PC_expected_prev[35];
	end
	if (
		( CURRENT_PC_expected_prev[36] !== 1'bx ) && ( CURRENT_PC_prev[36] !== CURRENT_PC_expected_prev[36] )
		&& ((CURRENT_PC_expected_prev[36] !== last_CURRENT_PC_exp[36]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[36] = CURRENT_PC_expected_prev[36];
	end
	if (
		( CURRENT_PC_expected_prev[37] !== 1'bx ) && ( CURRENT_PC_prev[37] !== CURRENT_PC_expected_prev[37] )
		&& ((CURRENT_PC_expected_prev[37] !== last_CURRENT_PC_exp[37]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[37] = CURRENT_PC_expected_prev[37];
	end
	if (
		( CURRENT_PC_expected_prev[38] !== 1'bx ) && ( CURRENT_PC_prev[38] !== CURRENT_PC_expected_prev[38] )
		&& ((CURRENT_PC_expected_prev[38] !== last_CURRENT_PC_exp[38]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[38] = CURRENT_PC_expected_prev[38];
	end
	if (
		( CURRENT_PC_expected_prev[39] !== 1'bx ) && ( CURRENT_PC_prev[39] !== CURRENT_PC_expected_prev[39] )
		&& ((CURRENT_PC_expected_prev[39] !== last_CURRENT_PC_exp[39]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[39] = CURRENT_PC_expected_prev[39];
	end
	if (
		( CURRENT_PC_expected_prev[40] !== 1'bx ) && ( CURRENT_PC_prev[40] !== CURRENT_PC_expected_prev[40] )
		&& ((CURRENT_PC_expected_prev[40] !== last_CURRENT_PC_exp[40]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[40] = CURRENT_PC_expected_prev[40];
	end
	if (
		( CURRENT_PC_expected_prev[41] !== 1'bx ) && ( CURRENT_PC_prev[41] !== CURRENT_PC_expected_prev[41] )
		&& ((CURRENT_PC_expected_prev[41] !== last_CURRENT_PC_exp[41]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[41] = CURRENT_PC_expected_prev[41];
	end
	if (
		( CURRENT_PC_expected_prev[42] !== 1'bx ) && ( CURRENT_PC_prev[42] !== CURRENT_PC_expected_prev[42] )
		&& ((CURRENT_PC_expected_prev[42] !== last_CURRENT_PC_exp[42]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[42] = CURRENT_PC_expected_prev[42];
	end
	if (
		( CURRENT_PC_expected_prev[43] !== 1'bx ) && ( CURRENT_PC_prev[43] !== CURRENT_PC_expected_prev[43] )
		&& ((CURRENT_PC_expected_prev[43] !== last_CURRENT_PC_exp[43]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[43] = CURRENT_PC_expected_prev[43];
	end
	if (
		( CURRENT_PC_expected_prev[44] !== 1'bx ) && ( CURRENT_PC_prev[44] !== CURRENT_PC_expected_prev[44] )
		&& ((CURRENT_PC_expected_prev[44] !== last_CURRENT_PC_exp[44]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[44] = CURRENT_PC_expected_prev[44];
	end
	if (
		( CURRENT_PC_expected_prev[45] !== 1'bx ) && ( CURRENT_PC_prev[45] !== CURRENT_PC_expected_prev[45] )
		&& ((CURRENT_PC_expected_prev[45] !== last_CURRENT_PC_exp[45]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[45] = CURRENT_PC_expected_prev[45];
	end
	if (
		( CURRENT_PC_expected_prev[46] !== 1'bx ) && ( CURRENT_PC_prev[46] !== CURRENT_PC_expected_prev[46] )
		&& ((CURRENT_PC_expected_prev[46] !== last_CURRENT_PC_exp[46]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[46] = CURRENT_PC_expected_prev[46];
	end
	if (
		( CURRENT_PC_expected_prev[47] !== 1'bx ) && ( CURRENT_PC_prev[47] !== CURRENT_PC_expected_prev[47] )
		&& ((CURRENT_PC_expected_prev[47] !== last_CURRENT_PC_exp[47]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[47] = CURRENT_PC_expected_prev[47];
	end
	if (
		( CURRENT_PC_expected_prev[48] !== 1'bx ) && ( CURRENT_PC_prev[48] !== CURRENT_PC_expected_prev[48] )
		&& ((CURRENT_PC_expected_prev[48] !== last_CURRENT_PC_exp[48]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[48] = CURRENT_PC_expected_prev[48];
	end
	if (
		( CURRENT_PC_expected_prev[49] !== 1'bx ) && ( CURRENT_PC_prev[49] !== CURRENT_PC_expected_prev[49] )
		&& ((CURRENT_PC_expected_prev[49] !== last_CURRENT_PC_exp[49]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[49] = CURRENT_PC_expected_prev[49];
	end
	if (
		( CURRENT_PC_expected_prev[50] !== 1'bx ) && ( CURRENT_PC_prev[50] !== CURRENT_PC_expected_prev[50] )
		&& ((CURRENT_PC_expected_prev[50] !== last_CURRENT_PC_exp[50]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[50] = CURRENT_PC_expected_prev[50];
	end
	if (
		( CURRENT_PC_expected_prev[51] !== 1'bx ) && ( CURRENT_PC_prev[51] !== CURRENT_PC_expected_prev[51] )
		&& ((CURRENT_PC_expected_prev[51] !== last_CURRENT_PC_exp[51]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[51] = CURRENT_PC_expected_prev[51];
	end
	if (
		( CURRENT_PC_expected_prev[52] !== 1'bx ) && ( CURRENT_PC_prev[52] !== CURRENT_PC_expected_prev[52] )
		&& ((CURRENT_PC_expected_prev[52] !== last_CURRENT_PC_exp[52]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[52] = CURRENT_PC_expected_prev[52];
	end
	if (
		( CURRENT_PC_expected_prev[53] !== 1'bx ) && ( CURRENT_PC_prev[53] !== CURRENT_PC_expected_prev[53] )
		&& ((CURRENT_PC_expected_prev[53] !== last_CURRENT_PC_exp[53]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[53] = CURRENT_PC_expected_prev[53];
	end
	if (
		( CURRENT_PC_expected_prev[54] !== 1'bx ) && ( CURRENT_PC_prev[54] !== CURRENT_PC_expected_prev[54] )
		&& ((CURRENT_PC_expected_prev[54] !== last_CURRENT_PC_exp[54]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[54] = CURRENT_PC_expected_prev[54];
	end
	if (
		( CURRENT_PC_expected_prev[55] !== 1'bx ) && ( CURRENT_PC_prev[55] !== CURRENT_PC_expected_prev[55] )
		&& ((CURRENT_PC_expected_prev[55] !== last_CURRENT_PC_exp[55]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[55] = CURRENT_PC_expected_prev[55];
	end
	if (
		( CURRENT_PC_expected_prev[56] !== 1'bx ) && ( CURRENT_PC_prev[56] !== CURRENT_PC_expected_prev[56] )
		&& ((CURRENT_PC_expected_prev[56] !== last_CURRENT_PC_exp[56]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[56] = CURRENT_PC_expected_prev[56];
	end
	if (
		( CURRENT_PC_expected_prev[57] !== 1'bx ) && ( CURRENT_PC_prev[57] !== CURRENT_PC_expected_prev[57] )
		&& ((CURRENT_PC_expected_prev[57] !== last_CURRENT_PC_exp[57]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[57] = CURRENT_PC_expected_prev[57];
	end
	if (
		( CURRENT_PC_expected_prev[58] !== 1'bx ) && ( CURRENT_PC_prev[58] !== CURRENT_PC_expected_prev[58] )
		&& ((CURRENT_PC_expected_prev[58] !== last_CURRENT_PC_exp[58]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[58] = CURRENT_PC_expected_prev[58];
	end
	if (
		( CURRENT_PC_expected_prev[59] !== 1'bx ) && ( CURRENT_PC_prev[59] !== CURRENT_PC_expected_prev[59] )
		&& ((CURRENT_PC_expected_prev[59] !== last_CURRENT_PC_exp[59]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[59] = CURRENT_PC_expected_prev[59];
	end
	if (
		( CURRENT_PC_expected_prev[60] !== 1'bx ) && ( CURRENT_PC_prev[60] !== CURRENT_PC_expected_prev[60] )
		&& ((CURRENT_PC_expected_prev[60] !== last_CURRENT_PC_exp[60]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[60] = CURRENT_PC_expected_prev[60];
	end
	if (
		( CURRENT_PC_expected_prev[61] !== 1'bx ) && ( CURRENT_PC_prev[61] !== CURRENT_PC_expected_prev[61] )
		&& ((CURRENT_PC_expected_prev[61] !== last_CURRENT_PC_exp[61]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[61] = CURRENT_PC_expected_prev[61];
	end
	if (
		( CURRENT_PC_expected_prev[62] !== 1'bx ) && ( CURRENT_PC_prev[62] !== CURRENT_PC_expected_prev[62] )
		&& ((CURRENT_PC_expected_prev[62] !== last_CURRENT_PC_exp[62]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[62] = CURRENT_PC_expected_prev[62];
	end
	if (
		( CURRENT_PC_expected_prev[63] !== 1'bx ) && ( CURRENT_PC_prev[63] !== CURRENT_PC_expected_prev[63] )
		&& ((CURRENT_PC_expected_prev[63] !== last_CURRENT_PC_exp[63]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_PC[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_PC_expected_prev);
		$display ("     Real value = %b", CURRENT_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CURRENT_PC_exp[63] = CURRENT_PC_expected_prev[63];
	end
	if (
		( LOOK_expected_prev[0] !== 1'bx ) && ( LOOK_prev[0] !== LOOK_expected_prev[0] )
		&& ((LOOK_expected_prev[0] !== last_LOOK_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[0] = LOOK_expected_prev[0];
	end
	if (
		( LOOK_expected_prev[1] !== 1'bx ) && ( LOOK_prev[1] !== LOOK_expected_prev[1] )
		&& ((LOOK_expected_prev[1] !== last_LOOK_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[1] = LOOK_expected_prev[1];
	end
	if (
		( LOOK_expected_prev[2] !== 1'bx ) && ( LOOK_prev[2] !== LOOK_expected_prev[2] )
		&& ((LOOK_expected_prev[2] !== last_LOOK_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[2] = LOOK_expected_prev[2];
	end
	if (
		( LOOK_expected_prev[3] !== 1'bx ) && ( LOOK_prev[3] !== LOOK_expected_prev[3] )
		&& ((LOOK_expected_prev[3] !== last_LOOK_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[3] = LOOK_expected_prev[3];
	end
	if (
		( LOOK_expected_prev[4] !== 1'bx ) && ( LOOK_prev[4] !== LOOK_expected_prev[4] )
		&& ((LOOK_expected_prev[4] !== last_LOOK_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[4] = LOOK_expected_prev[4];
	end
	if (
		( LOOK_expected_prev[5] !== 1'bx ) && ( LOOK_prev[5] !== LOOK_expected_prev[5] )
		&& ((LOOK_expected_prev[5] !== last_LOOK_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[5] = LOOK_expected_prev[5];
	end
	if (
		( LOOK_expected_prev[6] !== 1'bx ) && ( LOOK_prev[6] !== LOOK_expected_prev[6] )
		&& ((LOOK_expected_prev[6] !== last_LOOK_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[6] = LOOK_expected_prev[6];
	end
	if (
		( LOOK_expected_prev[7] !== 1'bx ) && ( LOOK_prev[7] !== LOOK_expected_prev[7] )
		&& ((LOOK_expected_prev[7] !== last_LOOK_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[7] = LOOK_expected_prev[7];
	end
	if (
		( LOOK_expected_prev[8] !== 1'bx ) && ( LOOK_prev[8] !== LOOK_expected_prev[8] )
		&& ((LOOK_expected_prev[8] !== last_LOOK_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[8] = LOOK_expected_prev[8];
	end
	if (
		( LOOK_expected_prev[9] !== 1'bx ) && ( LOOK_prev[9] !== LOOK_expected_prev[9] )
		&& ((LOOK_expected_prev[9] !== last_LOOK_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[9] = LOOK_expected_prev[9];
	end
	if (
		( LOOK_expected_prev[10] !== 1'bx ) && ( LOOK_prev[10] !== LOOK_expected_prev[10] )
		&& ((LOOK_expected_prev[10] !== last_LOOK_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[10] = LOOK_expected_prev[10];
	end
	if (
		( LOOK_expected_prev[11] !== 1'bx ) && ( LOOK_prev[11] !== LOOK_expected_prev[11] )
		&& ((LOOK_expected_prev[11] !== last_LOOK_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[11] = LOOK_expected_prev[11];
	end
	if (
		( LOOK_expected_prev[12] !== 1'bx ) && ( LOOK_prev[12] !== LOOK_expected_prev[12] )
		&& ((LOOK_expected_prev[12] !== last_LOOK_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[12] = LOOK_expected_prev[12];
	end
	if (
		( LOOK_expected_prev[13] !== 1'bx ) && ( LOOK_prev[13] !== LOOK_expected_prev[13] )
		&& ((LOOK_expected_prev[13] !== last_LOOK_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[13] = LOOK_expected_prev[13];
	end
	if (
		( LOOK_expected_prev[14] !== 1'bx ) && ( LOOK_prev[14] !== LOOK_expected_prev[14] )
		&& ((LOOK_expected_prev[14] !== last_LOOK_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[14] = LOOK_expected_prev[14];
	end
	if (
		( LOOK_expected_prev[15] !== 1'bx ) && ( LOOK_prev[15] !== LOOK_expected_prev[15] )
		&& ((LOOK_expected_prev[15] !== last_LOOK_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[15] = LOOK_expected_prev[15];
	end
	if (
		( LOOK_expected_prev[16] !== 1'bx ) && ( LOOK_prev[16] !== LOOK_expected_prev[16] )
		&& ((LOOK_expected_prev[16] !== last_LOOK_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[16] = LOOK_expected_prev[16];
	end
	if (
		( LOOK_expected_prev[17] !== 1'bx ) && ( LOOK_prev[17] !== LOOK_expected_prev[17] )
		&& ((LOOK_expected_prev[17] !== last_LOOK_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[17] = LOOK_expected_prev[17];
	end
	if (
		( LOOK_expected_prev[18] !== 1'bx ) && ( LOOK_prev[18] !== LOOK_expected_prev[18] )
		&& ((LOOK_expected_prev[18] !== last_LOOK_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[18] = LOOK_expected_prev[18];
	end
	if (
		( LOOK_expected_prev[19] !== 1'bx ) && ( LOOK_prev[19] !== LOOK_expected_prev[19] )
		&& ((LOOK_expected_prev[19] !== last_LOOK_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[19] = LOOK_expected_prev[19];
	end
	if (
		( LOOK_expected_prev[20] !== 1'bx ) && ( LOOK_prev[20] !== LOOK_expected_prev[20] )
		&& ((LOOK_expected_prev[20] !== last_LOOK_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[20] = LOOK_expected_prev[20];
	end
	if (
		( LOOK_expected_prev[21] !== 1'bx ) && ( LOOK_prev[21] !== LOOK_expected_prev[21] )
		&& ((LOOK_expected_prev[21] !== last_LOOK_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[21] = LOOK_expected_prev[21];
	end
	if (
		( LOOK_expected_prev[22] !== 1'bx ) && ( LOOK_prev[22] !== LOOK_expected_prev[22] )
		&& ((LOOK_expected_prev[22] !== last_LOOK_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[22] = LOOK_expected_prev[22];
	end
	if (
		( LOOK_expected_prev[23] !== 1'bx ) && ( LOOK_prev[23] !== LOOK_expected_prev[23] )
		&& ((LOOK_expected_prev[23] !== last_LOOK_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[23] = LOOK_expected_prev[23];
	end
	if (
		( LOOK_expected_prev[24] !== 1'bx ) && ( LOOK_prev[24] !== LOOK_expected_prev[24] )
		&& ((LOOK_expected_prev[24] !== last_LOOK_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[24] = LOOK_expected_prev[24];
	end
	if (
		( LOOK_expected_prev[25] !== 1'bx ) && ( LOOK_prev[25] !== LOOK_expected_prev[25] )
		&& ((LOOK_expected_prev[25] !== last_LOOK_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[25] = LOOK_expected_prev[25];
	end
	if (
		( LOOK_expected_prev[26] !== 1'bx ) && ( LOOK_prev[26] !== LOOK_expected_prev[26] )
		&& ((LOOK_expected_prev[26] !== last_LOOK_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[26] = LOOK_expected_prev[26];
	end
	if (
		( LOOK_expected_prev[27] !== 1'bx ) && ( LOOK_prev[27] !== LOOK_expected_prev[27] )
		&& ((LOOK_expected_prev[27] !== last_LOOK_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[27] = LOOK_expected_prev[27];
	end
	if (
		( LOOK_expected_prev[28] !== 1'bx ) && ( LOOK_prev[28] !== LOOK_expected_prev[28] )
		&& ((LOOK_expected_prev[28] !== last_LOOK_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[28] = LOOK_expected_prev[28];
	end
	if (
		( LOOK_expected_prev[29] !== 1'bx ) && ( LOOK_prev[29] !== LOOK_expected_prev[29] )
		&& ((LOOK_expected_prev[29] !== last_LOOK_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[29] = LOOK_expected_prev[29];
	end
	if (
		( LOOK_expected_prev[30] !== 1'bx ) && ( LOOK_prev[30] !== LOOK_expected_prev[30] )
		&& ((LOOK_expected_prev[30] !== last_LOOK_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[30] = LOOK_expected_prev[30];
	end
	if (
		( LOOK_expected_prev[31] !== 1'bx ) && ( LOOK_prev[31] !== LOOK_expected_prev[31] )
		&& ((LOOK_expected_prev[31] !== last_LOOK_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[31] = LOOK_expected_prev[31];
	end
	if (
		( LOOK_expected_prev[32] !== 1'bx ) && ( LOOK_prev[32] !== LOOK_expected_prev[32] )
		&& ((LOOK_expected_prev[32] !== last_LOOK_exp[32]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[32] = LOOK_expected_prev[32];
	end
	if (
		( LOOK_expected_prev[33] !== 1'bx ) && ( LOOK_prev[33] !== LOOK_expected_prev[33] )
		&& ((LOOK_expected_prev[33] !== last_LOOK_exp[33]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[33] = LOOK_expected_prev[33];
	end
	if (
		( LOOK_expected_prev[34] !== 1'bx ) && ( LOOK_prev[34] !== LOOK_expected_prev[34] )
		&& ((LOOK_expected_prev[34] !== last_LOOK_exp[34]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[34] = LOOK_expected_prev[34];
	end
	if (
		( LOOK_expected_prev[35] !== 1'bx ) && ( LOOK_prev[35] !== LOOK_expected_prev[35] )
		&& ((LOOK_expected_prev[35] !== last_LOOK_exp[35]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[35] = LOOK_expected_prev[35];
	end
	if (
		( LOOK_expected_prev[36] !== 1'bx ) && ( LOOK_prev[36] !== LOOK_expected_prev[36] )
		&& ((LOOK_expected_prev[36] !== last_LOOK_exp[36]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[36] = LOOK_expected_prev[36];
	end
	if (
		( LOOK_expected_prev[37] !== 1'bx ) && ( LOOK_prev[37] !== LOOK_expected_prev[37] )
		&& ((LOOK_expected_prev[37] !== last_LOOK_exp[37]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[37] = LOOK_expected_prev[37];
	end
	if (
		( LOOK_expected_prev[38] !== 1'bx ) && ( LOOK_prev[38] !== LOOK_expected_prev[38] )
		&& ((LOOK_expected_prev[38] !== last_LOOK_exp[38]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[38] = LOOK_expected_prev[38];
	end
	if (
		( LOOK_expected_prev[39] !== 1'bx ) && ( LOOK_prev[39] !== LOOK_expected_prev[39] )
		&& ((LOOK_expected_prev[39] !== last_LOOK_exp[39]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[39] = LOOK_expected_prev[39];
	end
	if (
		( LOOK_expected_prev[40] !== 1'bx ) && ( LOOK_prev[40] !== LOOK_expected_prev[40] )
		&& ((LOOK_expected_prev[40] !== last_LOOK_exp[40]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[40] = LOOK_expected_prev[40];
	end
	if (
		( LOOK_expected_prev[41] !== 1'bx ) && ( LOOK_prev[41] !== LOOK_expected_prev[41] )
		&& ((LOOK_expected_prev[41] !== last_LOOK_exp[41]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[41] = LOOK_expected_prev[41];
	end
	if (
		( LOOK_expected_prev[42] !== 1'bx ) && ( LOOK_prev[42] !== LOOK_expected_prev[42] )
		&& ((LOOK_expected_prev[42] !== last_LOOK_exp[42]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[42] = LOOK_expected_prev[42];
	end
	if (
		( LOOK_expected_prev[43] !== 1'bx ) && ( LOOK_prev[43] !== LOOK_expected_prev[43] )
		&& ((LOOK_expected_prev[43] !== last_LOOK_exp[43]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[43] = LOOK_expected_prev[43];
	end
	if (
		( LOOK_expected_prev[44] !== 1'bx ) && ( LOOK_prev[44] !== LOOK_expected_prev[44] )
		&& ((LOOK_expected_prev[44] !== last_LOOK_exp[44]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[44] = LOOK_expected_prev[44];
	end
	if (
		( LOOK_expected_prev[45] !== 1'bx ) && ( LOOK_prev[45] !== LOOK_expected_prev[45] )
		&& ((LOOK_expected_prev[45] !== last_LOOK_exp[45]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[45] = LOOK_expected_prev[45];
	end
	if (
		( LOOK_expected_prev[46] !== 1'bx ) && ( LOOK_prev[46] !== LOOK_expected_prev[46] )
		&& ((LOOK_expected_prev[46] !== last_LOOK_exp[46]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[46] = LOOK_expected_prev[46];
	end
	if (
		( LOOK_expected_prev[47] !== 1'bx ) && ( LOOK_prev[47] !== LOOK_expected_prev[47] )
		&& ((LOOK_expected_prev[47] !== last_LOOK_exp[47]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[47] = LOOK_expected_prev[47];
	end
	if (
		( LOOK_expected_prev[48] !== 1'bx ) && ( LOOK_prev[48] !== LOOK_expected_prev[48] )
		&& ((LOOK_expected_prev[48] !== last_LOOK_exp[48]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[48] = LOOK_expected_prev[48];
	end
	if (
		( LOOK_expected_prev[49] !== 1'bx ) && ( LOOK_prev[49] !== LOOK_expected_prev[49] )
		&& ((LOOK_expected_prev[49] !== last_LOOK_exp[49]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[49] = LOOK_expected_prev[49];
	end
	if (
		( LOOK_expected_prev[50] !== 1'bx ) && ( LOOK_prev[50] !== LOOK_expected_prev[50] )
		&& ((LOOK_expected_prev[50] !== last_LOOK_exp[50]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[50] = LOOK_expected_prev[50];
	end
	if (
		( LOOK_expected_prev[51] !== 1'bx ) && ( LOOK_prev[51] !== LOOK_expected_prev[51] )
		&& ((LOOK_expected_prev[51] !== last_LOOK_exp[51]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[51] = LOOK_expected_prev[51];
	end
	if (
		( LOOK_expected_prev[52] !== 1'bx ) && ( LOOK_prev[52] !== LOOK_expected_prev[52] )
		&& ((LOOK_expected_prev[52] !== last_LOOK_exp[52]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[52] = LOOK_expected_prev[52];
	end
	if (
		( LOOK_expected_prev[53] !== 1'bx ) && ( LOOK_prev[53] !== LOOK_expected_prev[53] )
		&& ((LOOK_expected_prev[53] !== last_LOOK_exp[53]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[53] = LOOK_expected_prev[53];
	end
	if (
		( LOOK_expected_prev[54] !== 1'bx ) && ( LOOK_prev[54] !== LOOK_expected_prev[54] )
		&& ((LOOK_expected_prev[54] !== last_LOOK_exp[54]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[54] = LOOK_expected_prev[54];
	end
	if (
		( LOOK_expected_prev[55] !== 1'bx ) && ( LOOK_prev[55] !== LOOK_expected_prev[55] )
		&& ((LOOK_expected_prev[55] !== last_LOOK_exp[55]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[55] = LOOK_expected_prev[55];
	end
	if (
		( LOOK_expected_prev[56] !== 1'bx ) && ( LOOK_prev[56] !== LOOK_expected_prev[56] )
		&& ((LOOK_expected_prev[56] !== last_LOOK_exp[56]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[56] = LOOK_expected_prev[56];
	end
	if (
		( LOOK_expected_prev[57] !== 1'bx ) && ( LOOK_prev[57] !== LOOK_expected_prev[57] )
		&& ((LOOK_expected_prev[57] !== last_LOOK_exp[57]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[57] = LOOK_expected_prev[57];
	end
	if (
		( LOOK_expected_prev[58] !== 1'bx ) && ( LOOK_prev[58] !== LOOK_expected_prev[58] )
		&& ((LOOK_expected_prev[58] !== last_LOOK_exp[58]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[58] = LOOK_expected_prev[58];
	end
	if (
		( LOOK_expected_prev[59] !== 1'bx ) && ( LOOK_prev[59] !== LOOK_expected_prev[59] )
		&& ((LOOK_expected_prev[59] !== last_LOOK_exp[59]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[59] = LOOK_expected_prev[59];
	end
	if (
		( LOOK_expected_prev[60] !== 1'bx ) && ( LOOK_prev[60] !== LOOK_expected_prev[60] )
		&& ((LOOK_expected_prev[60] !== last_LOOK_exp[60]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[60] = LOOK_expected_prev[60];
	end
	if (
		( LOOK_expected_prev[61] !== 1'bx ) && ( LOOK_prev[61] !== LOOK_expected_prev[61] )
		&& ((LOOK_expected_prev[61] !== last_LOOK_exp[61]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[61] = LOOK_expected_prev[61];
	end
	if (
		( LOOK_expected_prev[62] !== 1'bx ) && ( LOOK_prev[62] !== LOOK_expected_prev[62] )
		&& ((LOOK_expected_prev[62] !== last_LOOK_exp[62]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[62] = LOOK_expected_prev[62];
	end
	if (
		( LOOK_expected_prev[63] !== 1'bx ) && ( LOOK_prev[63] !== LOOK_expected_prev[63] )
		&& ((LOOK_expected_prev[63] !== last_LOOK_exp[63]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LOOK[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LOOK_expected_prev);
		$display ("     Real value = %b", LOOK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LOOK_exp[63] = LOOK_expected_prev[63];
	end
	if (
		( PROBE_expected_prev[0] !== 1'bx ) && ( PROBE_prev[0] !== PROBE_expected_prev[0] )
		&& ((PROBE_expected_prev[0] !== last_PROBE_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[0] = PROBE_expected_prev[0];
	end
	if (
		( PROBE_expected_prev[1] !== 1'bx ) && ( PROBE_prev[1] !== PROBE_expected_prev[1] )
		&& ((PROBE_expected_prev[1] !== last_PROBE_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[1] = PROBE_expected_prev[1];
	end
	if (
		( PROBE_expected_prev[2] !== 1'bx ) && ( PROBE_prev[2] !== PROBE_expected_prev[2] )
		&& ((PROBE_expected_prev[2] !== last_PROBE_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[2] = PROBE_expected_prev[2];
	end
	if (
		( PROBE_expected_prev[3] !== 1'bx ) && ( PROBE_prev[3] !== PROBE_expected_prev[3] )
		&& ((PROBE_expected_prev[3] !== last_PROBE_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[3] = PROBE_expected_prev[3];
	end
	if (
		( PROBE_expected_prev[4] !== 1'bx ) && ( PROBE_prev[4] !== PROBE_expected_prev[4] )
		&& ((PROBE_expected_prev[4] !== last_PROBE_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[4] = PROBE_expected_prev[4];
	end
	if (
		( PROBE_expected_prev[5] !== 1'bx ) && ( PROBE_prev[5] !== PROBE_expected_prev[5] )
		&& ((PROBE_expected_prev[5] !== last_PROBE_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[5] = PROBE_expected_prev[5];
	end
	if (
		( PROBE_expected_prev[6] !== 1'bx ) && ( PROBE_prev[6] !== PROBE_expected_prev[6] )
		&& ((PROBE_expected_prev[6] !== last_PROBE_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[6] = PROBE_expected_prev[6];
	end
	if (
		( PROBE_expected_prev[7] !== 1'bx ) && ( PROBE_prev[7] !== PROBE_expected_prev[7] )
		&& ((PROBE_expected_prev[7] !== last_PROBE_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[7] = PROBE_expected_prev[7];
	end
	if (
		( PROBE_expected_prev[8] !== 1'bx ) && ( PROBE_prev[8] !== PROBE_expected_prev[8] )
		&& ((PROBE_expected_prev[8] !== last_PROBE_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[8] = PROBE_expected_prev[8];
	end
	if (
		( PROBE_expected_prev[9] !== 1'bx ) && ( PROBE_prev[9] !== PROBE_expected_prev[9] )
		&& ((PROBE_expected_prev[9] !== last_PROBE_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[9] = PROBE_expected_prev[9];
	end
	if (
		( PROBE_expected_prev[10] !== 1'bx ) && ( PROBE_prev[10] !== PROBE_expected_prev[10] )
		&& ((PROBE_expected_prev[10] !== last_PROBE_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[10] = PROBE_expected_prev[10];
	end
	if (
		( PROBE_expected_prev[11] !== 1'bx ) && ( PROBE_prev[11] !== PROBE_expected_prev[11] )
		&& ((PROBE_expected_prev[11] !== last_PROBE_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[11] = PROBE_expected_prev[11];
	end
	if (
		( PROBE_expected_prev[12] !== 1'bx ) && ( PROBE_prev[12] !== PROBE_expected_prev[12] )
		&& ((PROBE_expected_prev[12] !== last_PROBE_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[12] = PROBE_expected_prev[12];
	end
	if (
		( PROBE_expected_prev[13] !== 1'bx ) && ( PROBE_prev[13] !== PROBE_expected_prev[13] )
		&& ((PROBE_expected_prev[13] !== last_PROBE_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[13] = PROBE_expected_prev[13];
	end
	if (
		( PROBE_expected_prev[14] !== 1'bx ) && ( PROBE_prev[14] !== PROBE_expected_prev[14] )
		&& ((PROBE_expected_prev[14] !== last_PROBE_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[14] = PROBE_expected_prev[14];
	end
	if (
		( PROBE_expected_prev[15] !== 1'bx ) && ( PROBE_prev[15] !== PROBE_expected_prev[15] )
		&& ((PROBE_expected_prev[15] !== last_PROBE_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[15] = PROBE_expected_prev[15];
	end
	if (
		( PROBE_expected_prev[16] !== 1'bx ) && ( PROBE_prev[16] !== PROBE_expected_prev[16] )
		&& ((PROBE_expected_prev[16] !== last_PROBE_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[16] = PROBE_expected_prev[16];
	end
	if (
		( PROBE_expected_prev[17] !== 1'bx ) && ( PROBE_prev[17] !== PROBE_expected_prev[17] )
		&& ((PROBE_expected_prev[17] !== last_PROBE_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[17] = PROBE_expected_prev[17];
	end
	if (
		( PROBE_expected_prev[18] !== 1'bx ) && ( PROBE_prev[18] !== PROBE_expected_prev[18] )
		&& ((PROBE_expected_prev[18] !== last_PROBE_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[18] = PROBE_expected_prev[18];
	end
	if (
		( PROBE_expected_prev[19] !== 1'bx ) && ( PROBE_prev[19] !== PROBE_expected_prev[19] )
		&& ((PROBE_expected_prev[19] !== last_PROBE_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[19] = PROBE_expected_prev[19];
	end
	if (
		( PROBE_expected_prev[20] !== 1'bx ) && ( PROBE_prev[20] !== PROBE_expected_prev[20] )
		&& ((PROBE_expected_prev[20] !== last_PROBE_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[20] = PROBE_expected_prev[20];
	end
	if (
		( PROBE_expected_prev[21] !== 1'bx ) && ( PROBE_prev[21] !== PROBE_expected_prev[21] )
		&& ((PROBE_expected_prev[21] !== last_PROBE_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[21] = PROBE_expected_prev[21];
	end
	if (
		( PROBE_expected_prev[22] !== 1'bx ) && ( PROBE_prev[22] !== PROBE_expected_prev[22] )
		&& ((PROBE_expected_prev[22] !== last_PROBE_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[22] = PROBE_expected_prev[22];
	end
	if (
		( PROBE_expected_prev[23] !== 1'bx ) && ( PROBE_prev[23] !== PROBE_expected_prev[23] )
		&& ((PROBE_expected_prev[23] !== last_PROBE_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[23] = PROBE_expected_prev[23];
	end
	if (
		( PROBE_expected_prev[24] !== 1'bx ) && ( PROBE_prev[24] !== PROBE_expected_prev[24] )
		&& ((PROBE_expected_prev[24] !== last_PROBE_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[24] = PROBE_expected_prev[24];
	end
	if (
		( PROBE_expected_prev[25] !== 1'bx ) && ( PROBE_prev[25] !== PROBE_expected_prev[25] )
		&& ((PROBE_expected_prev[25] !== last_PROBE_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[25] = PROBE_expected_prev[25];
	end
	if (
		( PROBE_expected_prev[26] !== 1'bx ) && ( PROBE_prev[26] !== PROBE_expected_prev[26] )
		&& ((PROBE_expected_prev[26] !== last_PROBE_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[26] = PROBE_expected_prev[26];
	end
	if (
		( PROBE_expected_prev[27] !== 1'bx ) && ( PROBE_prev[27] !== PROBE_expected_prev[27] )
		&& ((PROBE_expected_prev[27] !== last_PROBE_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[27] = PROBE_expected_prev[27];
	end
	if (
		( PROBE_expected_prev[28] !== 1'bx ) && ( PROBE_prev[28] !== PROBE_expected_prev[28] )
		&& ((PROBE_expected_prev[28] !== last_PROBE_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[28] = PROBE_expected_prev[28];
	end
	if (
		( PROBE_expected_prev[29] !== 1'bx ) && ( PROBE_prev[29] !== PROBE_expected_prev[29] )
		&& ((PROBE_expected_prev[29] !== last_PROBE_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[29] = PROBE_expected_prev[29];
	end
	if (
		( PROBE_expected_prev[30] !== 1'bx ) && ( PROBE_prev[30] !== PROBE_expected_prev[30] )
		&& ((PROBE_expected_prev[30] !== last_PROBE_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[30] = PROBE_expected_prev[30];
	end
	if (
		( PROBE_expected_prev[31] !== 1'bx ) && ( PROBE_prev[31] !== PROBE_expected_prev[31] )
		&& ((PROBE_expected_prev[31] !== last_PROBE_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[31] = PROBE_expected_prev[31];
	end
	if (
		( PROBE_expected_prev[32] !== 1'bx ) && ( PROBE_prev[32] !== PROBE_expected_prev[32] )
		&& ((PROBE_expected_prev[32] !== last_PROBE_exp[32]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[32] = PROBE_expected_prev[32];
	end
	if (
		( PROBE_expected_prev[33] !== 1'bx ) && ( PROBE_prev[33] !== PROBE_expected_prev[33] )
		&& ((PROBE_expected_prev[33] !== last_PROBE_exp[33]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[33] = PROBE_expected_prev[33];
	end
	if (
		( PROBE_expected_prev[34] !== 1'bx ) && ( PROBE_prev[34] !== PROBE_expected_prev[34] )
		&& ((PROBE_expected_prev[34] !== last_PROBE_exp[34]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[34] = PROBE_expected_prev[34];
	end
	if (
		( PROBE_expected_prev[35] !== 1'bx ) && ( PROBE_prev[35] !== PROBE_expected_prev[35] )
		&& ((PROBE_expected_prev[35] !== last_PROBE_exp[35]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[35] = PROBE_expected_prev[35];
	end
	if (
		( PROBE_expected_prev[36] !== 1'bx ) && ( PROBE_prev[36] !== PROBE_expected_prev[36] )
		&& ((PROBE_expected_prev[36] !== last_PROBE_exp[36]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[36] = PROBE_expected_prev[36];
	end
	if (
		( PROBE_expected_prev[37] !== 1'bx ) && ( PROBE_prev[37] !== PROBE_expected_prev[37] )
		&& ((PROBE_expected_prev[37] !== last_PROBE_exp[37]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[37] = PROBE_expected_prev[37];
	end
	if (
		( PROBE_expected_prev[38] !== 1'bx ) && ( PROBE_prev[38] !== PROBE_expected_prev[38] )
		&& ((PROBE_expected_prev[38] !== last_PROBE_exp[38]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[38] = PROBE_expected_prev[38];
	end
	if (
		( PROBE_expected_prev[39] !== 1'bx ) && ( PROBE_prev[39] !== PROBE_expected_prev[39] )
		&& ((PROBE_expected_prev[39] !== last_PROBE_exp[39]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[39] = PROBE_expected_prev[39];
	end
	if (
		( PROBE_expected_prev[40] !== 1'bx ) && ( PROBE_prev[40] !== PROBE_expected_prev[40] )
		&& ((PROBE_expected_prev[40] !== last_PROBE_exp[40]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[40] = PROBE_expected_prev[40];
	end
	if (
		( PROBE_expected_prev[41] !== 1'bx ) && ( PROBE_prev[41] !== PROBE_expected_prev[41] )
		&& ((PROBE_expected_prev[41] !== last_PROBE_exp[41]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[41] = PROBE_expected_prev[41];
	end
	if (
		( PROBE_expected_prev[42] !== 1'bx ) && ( PROBE_prev[42] !== PROBE_expected_prev[42] )
		&& ((PROBE_expected_prev[42] !== last_PROBE_exp[42]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[42] = PROBE_expected_prev[42];
	end
	if (
		( PROBE_expected_prev[43] !== 1'bx ) && ( PROBE_prev[43] !== PROBE_expected_prev[43] )
		&& ((PROBE_expected_prev[43] !== last_PROBE_exp[43]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[43] = PROBE_expected_prev[43];
	end
	if (
		( PROBE_expected_prev[44] !== 1'bx ) && ( PROBE_prev[44] !== PROBE_expected_prev[44] )
		&& ((PROBE_expected_prev[44] !== last_PROBE_exp[44]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[44] = PROBE_expected_prev[44];
	end
	if (
		( PROBE_expected_prev[45] !== 1'bx ) && ( PROBE_prev[45] !== PROBE_expected_prev[45] )
		&& ((PROBE_expected_prev[45] !== last_PROBE_exp[45]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[45] = PROBE_expected_prev[45];
	end
	if (
		( PROBE_expected_prev[46] !== 1'bx ) && ( PROBE_prev[46] !== PROBE_expected_prev[46] )
		&& ((PROBE_expected_prev[46] !== last_PROBE_exp[46]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[46] = PROBE_expected_prev[46];
	end
	if (
		( PROBE_expected_prev[47] !== 1'bx ) && ( PROBE_prev[47] !== PROBE_expected_prev[47] )
		&& ((PROBE_expected_prev[47] !== last_PROBE_exp[47]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[47] = PROBE_expected_prev[47];
	end
	if (
		( PROBE_expected_prev[48] !== 1'bx ) && ( PROBE_prev[48] !== PROBE_expected_prev[48] )
		&& ((PROBE_expected_prev[48] !== last_PROBE_exp[48]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[48] = PROBE_expected_prev[48];
	end
	if (
		( PROBE_expected_prev[49] !== 1'bx ) && ( PROBE_prev[49] !== PROBE_expected_prev[49] )
		&& ((PROBE_expected_prev[49] !== last_PROBE_exp[49]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[49] = PROBE_expected_prev[49];
	end
	if (
		( PROBE_expected_prev[50] !== 1'bx ) && ( PROBE_prev[50] !== PROBE_expected_prev[50] )
		&& ((PROBE_expected_prev[50] !== last_PROBE_exp[50]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[50] = PROBE_expected_prev[50];
	end
	if (
		( PROBE_expected_prev[51] !== 1'bx ) && ( PROBE_prev[51] !== PROBE_expected_prev[51] )
		&& ((PROBE_expected_prev[51] !== last_PROBE_exp[51]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[51] = PROBE_expected_prev[51];
	end
	if (
		( PROBE_expected_prev[52] !== 1'bx ) && ( PROBE_prev[52] !== PROBE_expected_prev[52] )
		&& ((PROBE_expected_prev[52] !== last_PROBE_exp[52]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[52] = PROBE_expected_prev[52];
	end
	if (
		( PROBE_expected_prev[53] !== 1'bx ) && ( PROBE_prev[53] !== PROBE_expected_prev[53] )
		&& ((PROBE_expected_prev[53] !== last_PROBE_exp[53]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[53] = PROBE_expected_prev[53];
	end
	if (
		( PROBE_expected_prev[54] !== 1'bx ) && ( PROBE_prev[54] !== PROBE_expected_prev[54] )
		&& ((PROBE_expected_prev[54] !== last_PROBE_exp[54]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[54] = PROBE_expected_prev[54];
	end
	if (
		( PROBE_expected_prev[55] !== 1'bx ) && ( PROBE_prev[55] !== PROBE_expected_prev[55] )
		&& ((PROBE_expected_prev[55] !== last_PROBE_exp[55]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[55] = PROBE_expected_prev[55];
	end
	if (
		( PROBE_expected_prev[56] !== 1'bx ) && ( PROBE_prev[56] !== PROBE_expected_prev[56] )
		&& ((PROBE_expected_prev[56] !== last_PROBE_exp[56]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[56] = PROBE_expected_prev[56];
	end
	if (
		( PROBE_expected_prev[57] !== 1'bx ) && ( PROBE_prev[57] !== PROBE_expected_prev[57] )
		&& ((PROBE_expected_prev[57] !== last_PROBE_exp[57]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[57] = PROBE_expected_prev[57];
	end
	if (
		( PROBE_expected_prev[58] !== 1'bx ) && ( PROBE_prev[58] !== PROBE_expected_prev[58] )
		&& ((PROBE_expected_prev[58] !== last_PROBE_exp[58]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[58] = PROBE_expected_prev[58];
	end
	if (
		( PROBE_expected_prev[59] !== 1'bx ) && ( PROBE_prev[59] !== PROBE_expected_prev[59] )
		&& ((PROBE_expected_prev[59] !== last_PROBE_exp[59]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[59] = PROBE_expected_prev[59];
	end
	if (
		( PROBE_expected_prev[60] !== 1'bx ) && ( PROBE_prev[60] !== PROBE_expected_prev[60] )
		&& ((PROBE_expected_prev[60] !== last_PROBE_exp[60]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[60] = PROBE_expected_prev[60];
	end
	if (
		( PROBE_expected_prev[61] !== 1'bx ) && ( PROBE_prev[61] !== PROBE_expected_prev[61] )
		&& ((PROBE_expected_prev[61] !== last_PROBE_exp[61]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[61] = PROBE_expected_prev[61];
	end
	if (
		( PROBE_expected_prev[62] !== 1'bx ) && ( PROBE_prev[62] !== PROBE_expected_prev[62] )
		&& ((PROBE_expected_prev[62] !== last_PROBE_exp[62]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[62] = PROBE_expected_prev[62];
	end
	if (
		( PROBE_expected_prev[63] !== 1'bx ) && ( PROBE_prev[63] !== PROBE_expected_prev[63] )
		&& ((PROBE_expected_prev[63] !== last_PROBE_exp[63]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PROBE[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PROBE_expected_prev);
		$display ("     Real value = %b", PROBE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PROBE_exp[63] = PROBE_expected_prev[63];
	end
	if (
		( READ_VALUE_expected_prev[0] !== 1'bx ) && ( READ_VALUE_prev[0] !== READ_VALUE_expected_prev[0] )
		&& ((READ_VALUE_expected_prev[0] !== last_READ_VALUE_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[0] = READ_VALUE_expected_prev[0];
	end
	if (
		( READ_VALUE_expected_prev[1] !== 1'bx ) && ( READ_VALUE_prev[1] !== READ_VALUE_expected_prev[1] )
		&& ((READ_VALUE_expected_prev[1] !== last_READ_VALUE_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[1] = READ_VALUE_expected_prev[1];
	end
	if (
		( READ_VALUE_expected_prev[2] !== 1'bx ) && ( READ_VALUE_prev[2] !== READ_VALUE_expected_prev[2] )
		&& ((READ_VALUE_expected_prev[2] !== last_READ_VALUE_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[2] = READ_VALUE_expected_prev[2];
	end
	if (
		( READ_VALUE_expected_prev[3] !== 1'bx ) && ( READ_VALUE_prev[3] !== READ_VALUE_expected_prev[3] )
		&& ((READ_VALUE_expected_prev[3] !== last_READ_VALUE_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[3] = READ_VALUE_expected_prev[3];
	end
	if (
		( READ_VALUE_expected_prev[4] !== 1'bx ) && ( READ_VALUE_prev[4] !== READ_VALUE_expected_prev[4] )
		&& ((READ_VALUE_expected_prev[4] !== last_READ_VALUE_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[4] = READ_VALUE_expected_prev[4];
	end
	if (
		( READ_VALUE_expected_prev[5] !== 1'bx ) && ( READ_VALUE_prev[5] !== READ_VALUE_expected_prev[5] )
		&& ((READ_VALUE_expected_prev[5] !== last_READ_VALUE_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[5] = READ_VALUE_expected_prev[5];
	end
	if (
		( READ_VALUE_expected_prev[6] !== 1'bx ) && ( READ_VALUE_prev[6] !== READ_VALUE_expected_prev[6] )
		&& ((READ_VALUE_expected_prev[6] !== last_READ_VALUE_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[6] = READ_VALUE_expected_prev[6];
	end
	if (
		( READ_VALUE_expected_prev[7] !== 1'bx ) && ( READ_VALUE_prev[7] !== READ_VALUE_expected_prev[7] )
		&& ((READ_VALUE_expected_prev[7] !== last_READ_VALUE_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[7] = READ_VALUE_expected_prev[7];
	end
	if (
		( READ_VALUE_expected_prev[8] !== 1'bx ) && ( READ_VALUE_prev[8] !== READ_VALUE_expected_prev[8] )
		&& ((READ_VALUE_expected_prev[8] !== last_READ_VALUE_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[8] = READ_VALUE_expected_prev[8];
	end
	if (
		( READ_VALUE_expected_prev[9] !== 1'bx ) && ( READ_VALUE_prev[9] !== READ_VALUE_expected_prev[9] )
		&& ((READ_VALUE_expected_prev[9] !== last_READ_VALUE_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[9] = READ_VALUE_expected_prev[9];
	end
	if (
		( READ_VALUE_expected_prev[10] !== 1'bx ) && ( READ_VALUE_prev[10] !== READ_VALUE_expected_prev[10] )
		&& ((READ_VALUE_expected_prev[10] !== last_READ_VALUE_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[10] = READ_VALUE_expected_prev[10];
	end
	if (
		( READ_VALUE_expected_prev[11] !== 1'bx ) && ( READ_VALUE_prev[11] !== READ_VALUE_expected_prev[11] )
		&& ((READ_VALUE_expected_prev[11] !== last_READ_VALUE_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[11] = READ_VALUE_expected_prev[11];
	end
	if (
		( READ_VALUE_expected_prev[12] !== 1'bx ) && ( READ_VALUE_prev[12] !== READ_VALUE_expected_prev[12] )
		&& ((READ_VALUE_expected_prev[12] !== last_READ_VALUE_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[12] = READ_VALUE_expected_prev[12];
	end
	if (
		( READ_VALUE_expected_prev[13] !== 1'bx ) && ( READ_VALUE_prev[13] !== READ_VALUE_expected_prev[13] )
		&& ((READ_VALUE_expected_prev[13] !== last_READ_VALUE_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[13] = READ_VALUE_expected_prev[13];
	end
	if (
		( READ_VALUE_expected_prev[14] !== 1'bx ) && ( READ_VALUE_prev[14] !== READ_VALUE_expected_prev[14] )
		&& ((READ_VALUE_expected_prev[14] !== last_READ_VALUE_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[14] = READ_VALUE_expected_prev[14];
	end
	if (
		( READ_VALUE_expected_prev[15] !== 1'bx ) && ( READ_VALUE_prev[15] !== READ_VALUE_expected_prev[15] )
		&& ((READ_VALUE_expected_prev[15] !== last_READ_VALUE_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[15] = READ_VALUE_expected_prev[15];
	end
	if (
		( READ_VALUE_expected_prev[16] !== 1'bx ) && ( READ_VALUE_prev[16] !== READ_VALUE_expected_prev[16] )
		&& ((READ_VALUE_expected_prev[16] !== last_READ_VALUE_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[16] = READ_VALUE_expected_prev[16];
	end
	if (
		( READ_VALUE_expected_prev[17] !== 1'bx ) && ( READ_VALUE_prev[17] !== READ_VALUE_expected_prev[17] )
		&& ((READ_VALUE_expected_prev[17] !== last_READ_VALUE_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[17] = READ_VALUE_expected_prev[17];
	end
	if (
		( READ_VALUE_expected_prev[18] !== 1'bx ) && ( READ_VALUE_prev[18] !== READ_VALUE_expected_prev[18] )
		&& ((READ_VALUE_expected_prev[18] !== last_READ_VALUE_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[18] = READ_VALUE_expected_prev[18];
	end
	if (
		( READ_VALUE_expected_prev[19] !== 1'bx ) && ( READ_VALUE_prev[19] !== READ_VALUE_expected_prev[19] )
		&& ((READ_VALUE_expected_prev[19] !== last_READ_VALUE_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[19] = READ_VALUE_expected_prev[19];
	end
	if (
		( READ_VALUE_expected_prev[20] !== 1'bx ) && ( READ_VALUE_prev[20] !== READ_VALUE_expected_prev[20] )
		&& ((READ_VALUE_expected_prev[20] !== last_READ_VALUE_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[20] = READ_VALUE_expected_prev[20];
	end
	if (
		( READ_VALUE_expected_prev[21] !== 1'bx ) && ( READ_VALUE_prev[21] !== READ_VALUE_expected_prev[21] )
		&& ((READ_VALUE_expected_prev[21] !== last_READ_VALUE_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[21] = READ_VALUE_expected_prev[21];
	end
	if (
		( READ_VALUE_expected_prev[22] !== 1'bx ) && ( READ_VALUE_prev[22] !== READ_VALUE_expected_prev[22] )
		&& ((READ_VALUE_expected_prev[22] !== last_READ_VALUE_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[22] = READ_VALUE_expected_prev[22];
	end
	if (
		( READ_VALUE_expected_prev[23] !== 1'bx ) && ( READ_VALUE_prev[23] !== READ_VALUE_expected_prev[23] )
		&& ((READ_VALUE_expected_prev[23] !== last_READ_VALUE_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[23] = READ_VALUE_expected_prev[23];
	end
	if (
		( READ_VALUE_expected_prev[24] !== 1'bx ) && ( READ_VALUE_prev[24] !== READ_VALUE_expected_prev[24] )
		&& ((READ_VALUE_expected_prev[24] !== last_READ_VALUE_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[24] = READ_VALUE_expected_prev[24];
	end
	if (
		( READ_VALUE_expected_prev[25] !== 1'bx ) && ( READ_VALUE_prev[25] !== READ_VALUE_expected_prev[25] )
		&& ((READ_VALUE_expected_prev[25] !== last_READ_VALUE_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[25] = READ_VALUE_expected_prev[25];
	end
	if (
		( READ_VALUE_expected_prev[26] !== 1'bx ) && ( READ_VALUE_prev[26] !== READ_VALUE_expected_prev[26] )
		&& ((READ_VALUE_expected_prev[26] !== last_READ_VALUE_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[26] = READ_VALUE_expected_prev[26];
	end
	if (
		( READ_VALUE_expected_prev[27] !== 1'bx ) && ( READ_VALUE_prev[27] !== READ_VALUE_expected_prev[27] )
		&& ((READ_VALUE_expected_prev[27] !== last_READ_VALUE_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[27] = READ_VALUE_expected_prev[27];
	end
	if (
		( READ_VALUE_expected_prev[28] !== 1'bx ) && ( READ_VALUE_prev[28] !== READ_VALUE_expected_prev[28] )
		&& ((READ_VALUE_expected_prev[28] !== last_READ_VALUE_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[28] = READ_VALUE_expected_prev[28];
	end
	if (
		( READ_VALUE_expected_prev[29] !== 1'bx ) && ( READ_VALUE_prev[29] !== READ_VALUE_expected_prev[29] )
		&& ((READ_VALUE_expected_prev[29] !== last_READ_VALUE_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[29] = READ_VALUE_expected_prev[29];
	end
	if (
		( READ_VALUE_expected_prev[30] !== 1'bx ) && ( READ_VALUE_prev[30] !== READ_VALUE_expected_prev[30] )
		&& ((READ_VALUE_expected_prev[30] !== last_READ_VALUE_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[30] = READ_VALUE_expected_prev[30];
	end
	if (
		( READ_VALUE_expected_prev[31] !== 1'bx ) && ( READ_VALUE_prev[31] !== READ_VALUE_expected_prev[31] )
		&& ((READ_VALUE_expected_prev[31] !== last_READ_VALUE_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[31] = READ_VALUE_expected_prev[31];
	end
	if (
		( READ_VALUE_expected_prev[32] !== 1'bx ) && ( READ_VALUE_prev[32] !== READ_VALUE_expected_prev[32] )
		&& ((READ_VALUE_expected_prev[32] !== last_READ_VALUE_exp[32]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[32] = READ_VALUE_expected_prev[32];
	end
	if (
		( READ_VALUE_expected_prev[33] !== 1'bx ) && ( READ_VALUE_prev[33] !== READ_VALUE_expected_prev[33] )
		&& ((READ_VALUE_expected_prev[33] !== last_READ_VALUE_exp[33]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[33] = READ_VALUE_expected_prev[33];
	end
	if (
		( READ_VALUE_expected_prev[34] !== 1'bx ) && ( READ_VALUE_prev[34] !== READ_VALUE_expected_prev[34] )
		&& ((READ_VALUE_expected_prev[34] !== last_READ_VALUE_exp[34]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[34] = READ_VALUE_expected_prev[34];
	end
	if (
		( READ_VALUE_expected_prev[35] !== 1'bx ) && ( READ_VALUE_prev[35] !== READ_VALUE_expected_prev[35] )
		&& ((READ_VALUE_expected_prev[35] !== last_READ_VALUE_exp[35]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[35] = READ_VALUE_expected_prev[35];
	end
	if (
		( READ_VALUE_expected_prev[36] !== 1'bx ) && ( READ_VALUE_prev[36] !== READ_VALUE_expected_prev[36] )
		&& ((READ_VALUE_expected_prev[36] !== last_READ_VALUE_exp[36]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[36] = READ_VALUE_expected_prev[36];
	end
	if (
		( READ_VALUE_expected_prev[37] !== 1'bx ) && ( READ_VALUE_prev[37] !== READ_VALUE_expected_prev[37] )
		&& ((READ_VALUE_expected_prev[37] !== last_READ_VALUE_exp[37]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[37] = READ_VALUE_expected_prev[37];
	end
	if (
		( READ_VALUE_expected_prev[38] !== 1'bx ) && ( READ_VALUE_prev[38] !== READ_VALUE_expected_prev[38] )
		&& ((READ_VALUE_expected_prev[38] !== last_READ_VALUE_exp[38]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[38] = READ_VALUE_expected_prev[38];
	end
	if (
		( READ_VALUE_expected_prev[39] !== 1'bx ) && ( READ_VALUE_prev[39] !== READ_VALUE_expected_prev[39] )
		&& ((READ_VALUE_expected_prev[39] !== last_READ_VALUE_exp[39]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[39] = READ_VALUE_expected_prev[39];
	end
	if (
		( READ_VALUE_expected_prev[40] !== 1'bx ) && ( READ_VALUE_prev[40] !== READ_VALUE_expected_prev[40] )
		&& ((READ_VALUE_expected_prev[40] !== last_READ_VALUE_exp[40]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[40] = READ_VALUE_expected_prev[40];
	end
	if (
		( READ_VALUE_expected_prev[41] !== 1'bx ) && ( READ_VALUE_prev[41] !== READ_VALUE_expected_prev[41] )
		&& ((READ_VALUE_expected_prev[41] !== last_READ_VALUE_exp[41]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[41] = READ_VALUE_expected_prev[41];
	end
	if (
		( READ_VALUE_expected_prev[42] !== 1'bx ) && ( READ_VALUE_prev[42] !== READ_VALUE_expected_prev[42] )
		&& ((READ_VALUE_expected_prev[42] !== last_READ_VALUE_exp[42]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[42] = READ_VALUE_expected_prev[42];
	end
	if (
		( READ_VALUE_expected_prev[43] !== 1'bx ) && ( READ_VALUE_prev[43] !== READ_VALUE_expected_prev[43] )
		&& ((READ_VALUE_expected_prev[43] !== last_READ_VALUE_exp[43]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[43] = READ_VALUE_expected_prev[43];
	end
	if (
		( READ_VALUE_expected_prev[44] !== 1'bx ) && ( READ_VALUE_prev[44] !== READ_VALUE_expected_prev[44] )
		&& ((READ_VALUE_expected_prev[44] !== last_READ_VALUE_exp[44]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[44] = READ_VALUE_expected_prev[44];
	end
	if (
		( READ_VALUE_expected_prev[45] !== 1'bx ) && ( READ_VALUE_prev[45] !== READ_VALUE_expected_prev[45] )
		&& ((READ_VALUE_expected_prev[45] !== last_READ_VALUE_exp[45]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[45] = READ_VALUE_expected_prev[45];
	end
	if (
		( READ_VALUE_expected_prev[46] !== 1'bx ) && ( READ_VALUE_prev[46] !== READ_VALUE_expected_prev[46] )
		&& ((READ_VALUE_expected_prev[46] !== last_READ_VALUE_exp[46]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[46] = READ_VALUE_expected_prev[46];
	end
	if (
		( READ_VALUE_expected_prev[47] !== 1'bx ) && ( READ_VALUE_prev[47] !== READ_VALUE_expected_prev[47] )
		&& ((READ_VALUE_expected_prev[47] !== last_READ_VALUE_exp[47]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[47] = READ_VALUE_expected_prev[47];
	end
	if (
		( READ_VALUE_expected_prev[48] !== 1'bx ) && ( READ_VALUE_prev[48] !== READ_VALUE_expected_prev[48] )
		&& ((READ_VALUE_expected_prev[48] !== last_READ_VALUE_exp[48]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[48] = READ_VALUE_expected_prev[48];
	end
	if (
		( READ_VALUE_expected_prev[49] !== 1'bx ) && ( READ_VALUE_prev[49] !== READ_VALUE_expected_prev[49] )
		&& ((READ_VALUE_expected_prev[49] !== last_READ_VALUE_exp[49]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[49] = READ_VALUE_expected_prev[49];
	end
	if (
		( READ_VALUE_expected_prev[50] !== 1'bx ) && ( READ_VALUE_prev[50] !== READ_VALUE_expected_prev[50] )
		&& ((READ_VALUE_expected_prev[50] !== last_READ_VALUE_exp[50]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[50] = READ_VALUE_expected_prev[50];
	end
	if (
		( READ_VALUE_expected_prev[51] !== 1'bx ) && ( READ_VALUE_prev[51] !== READ_VALUE_expected_prev[51] )
		&& ((READ_VALUE_expected_prev[51] !== last_READ_VALUE_exp[51]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[51] = READ_VALUE_expected_prev[51];
	end
	if (
		( READ_VALUE_expected_prev[52] !== 1'bx ) && ( READ_VALUE_prev[52] !== READ_VALUE_expected_prev[52] )
		&& ((READ_VALUE_expected_prev[52] !== last_READ_VALUE_exp[52]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[52] = READ_VALUE_expected_prev[52];
	end
	if (
		( READ_VALUE_expected_prev[53] !== 1'bx ) && ( READ_VALUE_prev[53] !== READ_VALUE_expected_prev[53] )
		&& ((READ_VALUE_expected_prev[53] !== last_READ_VALUE_exp[53]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[53] = READ_VALUE_expected_prev[53];
	end
	if (
		( READ_VALUE_expected_prev[54] !== 1'bx ) && ( READ_VALUE_prev[54] !== READ_VALUE_expected_prev[54] )
		&& ((READ_VALUE_expected_prev[54] !== last_READ_VALUE_exp[54]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[54] = READ_VALUE_expected_prev[54];
	end
	if (
		( READ_VALUE_expected_prev[55] !== 1'bx ) && ( READ_VALUE_prev[55] !== READ_VALUE_expected_prev[55] )
		&& ((READ_VALUE_expected_prev[55] !== last_READ_VALUE_exp[55]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[55] = READ_VALUE_expected_prev[55];
	end
	if (
		( READ_VALUE_expected_prev[56] !== 1'bx ) && ( READ_VALUE_prev[56] !== READ_VALUE_expected_prev[56] )
		&& ((READ_VALUE_expected_prev[56] !== last_READ_VALUE_exp[56]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[56] = READ_VALUE_expected_prev[56];
	end
	if (
		( READ_VALUE_expected_prev[57] !== 1'bx ) && ( READ_VALUE_prev[57] !== READ_VALUE_expected_prev[57] )
		&& ((READ_VALUE_expected_prev[57] !== last_READ_VALUE_exp[57]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[57] = READ_VALUE_expected_prev[57];
	end
	if (
		( READ_VALUE_expected_prev[58] !== 1'bx ) && ( READ_VALUE_prev[58] !== READ_VALUE_expected_prev[58] )
		&& ((READ_VALUE_expected_prev[58] !== last_READ_VALUE_exp[58]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[58] = READ_VALUE_expected_prev[58];
	end
	if (
		( READ_VALUE_expected_prev[59] !== 1'bx ) && ( READ_VALUE_prev[59] !== READ_VALUE_expected_prev[59] )
		&& ((READ_VALUE_expected_prev[59] !== last_READ_VALUE_exp[59]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[59] = READ_VALUE_expected_prev[59];
	end
	if (
		( READ_VALUE_expected_prev[60] !== 1'bx ) && ( READ_VALUE_prev[60] !== READ_VALUE_expected_prev[60] )
		&& ((READ_VALUE_expected_prev[60] !== last_READ_VALUE_exp[60]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[60] = READ_VALUE_expected_prev[60];
	end
	if (
		( READ_VALUE_expected_prev[61] !== 1'bx ) && ( READ_VALUE_prev[61] !== READ_VALUE_expected_prev[61] )
		&& ((READ_VALUE_expected_prev[61] !== last_READ_VALUE_exp[61]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[61] = READ_VALUE_expected_prev[61];
	end
	if (
		( READ_VALUE_expected_prev[62] !== 1'bx ) && ( READ_VALUE_prev[62] !== READ_VALUE_expected_prev[62] )
		&& ((READ_VALUE_expected_prev[62] !== last_READ_VALUE_exp[62]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[62] = READ_VALUE_expected_prev[62];
	end
	if (
		( READ_VALUE_expected_prev[63] !== 1'bx ) && ( READ_VALUE_prev[63] !== READ_VALUE_expected_prev[63] )
		&& ((READ_VALUE_expected_prev[63] !== last_READ_VALUE_exp[63]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port READ_VALUE[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", READ_VALUE_expected_prev);
		$display ("     Real value = %b", READ_VALUE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_READ_VALUE_exp[63] = READ_VALUE_expected_prev[63];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module top_level_KMC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg INIT_Enable;
reg [63:0] INIT_VALUE;
reg [31:0] INSTRUCTION;
// wires                                               
wire [63:0] ADDRESS;
wire [63:0] CURRENT_PC;
wire [63:0] LOOK;
wire [63:0] PROBE;
wire [63:0] READ_VALUE;

wire sampler;                             

// assign statements (if any)                          
top_level_KMC i1 (
// port map - connection between master ports and signals/registers   
	.ADDRESS(ADDRESS),
	.clock(clock),
	.CURRENT_PC(CURRENT_PC),
	.INIT_Enable(INIT_Enable),
	.INIT_VALUE(INIT_VALUE),
	.INSTRUCTION(INSTRUCTION),
	.LOOK(LOOK),
	.PROBE(PROBE),
	.READ_VALUE(READ_VALUE)
);

// clock
initial
begin
	clock = 1'b1;
	# 10000;
	repeat(9)
	begin
		clock = 1'b0;
		clock = #10000 1'b1;
		# 10000;
	end
	clock = 1'b0;
end 

// INIT_Enable
initial
begin
	INIT_Enable = 1'b1;
	INIT_Enable = #60000 1'b0;
end 
// INIT_VALUE[ 63 ]
initial
begin
	INIT_VALUE[63] = 1'b0;
	INIT_VALUE[63] = #60000 1'bX;
end 
// INIT_VALUE[ 62 ]
initial
begin
	INIT_VALUE[62] = 1'b0;
	INIT_VALUE[62] = #60000 1'bX;
end 
// INIT_VALUE[ 61 ]
initial
begin
	INIT_VALUE[61] = 1'b0;
	INIT_VALUE[61] = #60000 1'bX;
end 
// INIT_VALUE[ 60 ]
initial
begin
	INIT_VALUE[60] = 1'b0;
	INIT_VALUE[60] = #60000 1'bX;
end 
// INIT_VALUE[ 59 ]
initial
begin
	INIT_VALUE[59] = 1'b0;
	INIT_VALUE[59] = #60000 1'bX;
end 
// INIT_VALUE[ 58 ]
initial
begin
	INIT_VALUE[58] = 1'b0;
	INIT_VALUE[58] = #60000 1'bX;
end 
// INIT_VALUE[ 57 ]
initial
begin
	INIT_VALUE[57] = 1'b0;
	INIT_VALUE[57] = #60000 1'bX;
end 
// INIT_VALUE[ 56 ]
initial
begin
	INIT_VALUE[56] = 1'b0;
	INIT_VALUE[56] = #60000 1'bX;
end 
// INIT_VALUE[ 55 ]
initial
begin
	INIT_VALUE[55] = 1'b0;
	INIT_VALUE[55] = #60000 1'bX;
end 
// INIT_VALUE[ 54 ]
initial
begin
	INIT_VALUE[54] = 1'b0;
	INIT_VALUE[54] = #60000 1'bX;
end 
// INIT_VALUE[ 53 ]
initial
begin
	INIT_VALUE[53] = 1'b0;
	INIT_VALUE[53] = #60000 1'bX;
end 
// INIT_VALUE[ 52 ]
initial
begin
	INIT_VALUE[52] = 1'b0;
	INIT_VALUE[52] = #60000 1'bX;
end 
// INIT_VALUE[ 51 ]
initial
begin
	INIT_VALUE[51] = 1'b0;
	INIT_VALUE[51] = #60000 1'bX;
end 
// INIT_VALUE[ 50 ]
initial
begin
	INIT_VALUE[50] = 1'b0;
	INIT_VALUE[50] = #60000 1'bX;
end 
// INIT_VALUE[ 49 ]
initial
begin
	INIT_VALUE[49] = 1'b0;
	INIT_VALUE[49] = #60000 1'bX;
end 
// INIT_VALUE[ 48 ]
initial
begin
	INIT_VALUE[48] = 1'b0;
	INIT_VALUE[48] = #60000 1'bX;
end 
// INIT_VALUE[ 47 ]
initial
begin
	INIT_VALUE[47] = 1'b0;
	INIT_VALUE[47] = #60000 1'bX;
end 
// INIT_VALUE[ 46 ]
initial
begin
	INIT_VALUE[46] = 1'b0;
	INIT_VALUE[46] = #60000 1'bX;
end 
// INIT_VALUE[ 45 ]
initial
begin
	INIT_VALUE[45] = 1'b0;
	INIT_VALUE[45] = #60000 1'bX;
end 
// INIT_VALUE[ 44 ]
initial
begin
	INIT_VALUE[44] = 1'b0;
	INIT_VALUE[44] = #60000 1'bX;
end 
// INIT_VALUE[ 43 ]
initial
begin
	INIT_VALUE[43] = 1'b0;
	INIT_VALUE[43] = #60000 1'bX;
end 
// INIT_VALUE[ 42 ]
initial
begin
	INIT_VALUE[42] = 1'b0;
	INIT_VALUE[42] = #60000 1'bX;
end 
// INIT_VALUE[ 41 ]
initial
begin
	INIT_VALUE[41] = 1'b0;
	INIT_VALUE[41] = #60000 1'bX;
end 
// INIT_VALUE[ 40 ]
initial
begin
	INIT_VALUE[40] = 1'b0;
	INIT_VALUE[40] = #60000 1'bX;
end 
// INIT_VALUE[ 39 ]
initial
begin
	INIT_VALUE[39] = 1'b0;
	INIT_VALUE[39] = #60000 1'bX;
end 
// INIT_VALUE[ 38 ]
initial
begin
	INIT_VALUE[38] = 1'b0;
	INIT_VALUE[38] = #60000 1'bX;
end 
// INIT_VALUE[ 37 ]
initial
begin
	INIT_VALUE[37] = 1'b0;
	INIT_VALUE[37] = #60000 1'bX;
end 
// INIT_VALUE[ 36 ]
initial
begin
	INIT_VALUE[36] = 1'b0;
	INIT_VALUE[36] = #60000 1'bX;
end 
// INIT_VALUE[ 35 ]
initial
begin
	INIT_VALUE[35] = 1'b0;
	INIT_VALUE[35] = #60000 1'bX;
end 
// INIT_VALUE[ 34 ]
initial
begin
	INIT_VALUE[34] = 1'b0;
	INIT_VALUE[34] = #60000 1'bX;
end 
// INIT_VALUE[ 33 ]
initial
begin
	INIT_VALUE[33] = 1'b0;
	INIT_VALUE[33] = #60000 1'bX;
end 
// INIT_VALUE[ 32 ]
initial
begin
	INIT_VALUE[32] = 1'b0;
	INIT_VALUE[32] = #60000 1'bX;
end 
// INIT_VALUE[ 31 ]
initial
begin
	INIT_VALUE[31] = 1'b0;
	INIT_VALUE[31] = #60000 1'bX;
end 
// INIT_VALUE[ 30 ]
initial
begin
	INIT_VALUE[30] = 1'b0;
	INIT_VALUE[30] = #60000 1'bX;
end 
// INIT_VALUE[ 29 ]
initial
begin
	INIT_VALUE[29] = 1'b0;
	INIT_VALUE[29] = #60000 1'bX;
end 
// INIT_VALUE[ 28 ]
initial
begin
	INIT_VALUE[28] = 1'b0;
	INIT_VALUE[28] = #60000 1'bX;
end 
// INIT_VALUE[ 27 ]
initial
begin
	INIT_VALUE[27] = 1'b0;
	INIT_VALUE[27] = #60000 1'bX;
end 
// INIT_VALUE[ 26 ]
initial
begin
	INIT_VALUE[26] = 1'b0;
	INIT_VALUE[26] = #60000 1'bX;
end 
// INIT_VALUE[ 25 ]
initial
begin
	INIT_VALUE[25] = 1'b0;
	INIT_VALUE[25] = #60000 1'bX;
end 
// INIT_VALUE[ 24 ]
initial
begin
	INIT_VALUE[24] = 1'b0;
	INIT_VALUE[24] = #60000 1'bX;
end 
// INIT_VALUE[ 23 ]
initial
begin
	INIT_VALUE[23] = 1'b0;
	INIT_VALUE[23] = #60000 1'bX;
end 
// INIT_VALUE[ 22 ]
initial
begin
	INIT_VALUE[22] = 1'b0;
	INIT_VALUE[22] = #60000 1'bX;
end 
// INIT_VALUE[ 21 ]
initial
begin
	INIT_VALUE[21] = 1'b0;
	INIT_VALUE[21] = #60000 1'bX;
end 
// INIT_VALUE[ 20 ]
initial
begin
	INIT_VALUE[20] = 1'b0;
	INIT_VALUE[20] = #60000 1'bX;
end 
// INIT_VALUE[ 19 ]
initial
begin
	INIT_VALUE[19] = 1'b0;
	INIT_VALUE[19] = #60000 1'bX;
end 
// INIT_VALUE[ 18 ]
initial
begin
	INIT_VALUE[18] = 1'b0;
	INIT_VALUE[18] = #60000 1'bX;
end 
// INIT_VALUE[ 17 ]
initial
begin
	INIT_VALUE[17] = 1'b0;
	INIT_VALUE[17] = #60000 1'bX;
end 
// INIT_VALUE[ 16 ]
initial
begin
	INIT_VALUE[16] = 1'b0;
	INIT_VALUE[16] = #60000 1'bX;
end 
// INIT_VALUE[ 15 ]
initial
begin
	INIT_VALUE[15] = 1'b0;
	INIT_VALUE[15] = #60000 1'bX;
end 
// INIT_VALUE[ 14 ]
initial
begin
	INIT_VALUE[14] = 1'b0;
	INIT_VALUE[14] = #60000 1'bX;
end 
// INIT_VALUE[ 13 ]
initial
begin
	INIT_VALUE[13] = 1'b0;
	INIT_VALUE[13] = #60000 1'bX;
end 
// INIT_VALUE[ 12 ]
initial
begin
	INIT_VALUE[12] = 1'b0;
	INIT_VALUE[12] = #60000 1'bX;
end 
// INIT_VALUE[ 11 ]
initial
begin
	INIT_VALUE[11] = 1'b0;
	INIT_VALUE[11] = #60000 1'bX;
end 
// INIT_VALUE[ 10 ]
initial
begin
	INIT_VALUE[10] = 1'b0;
	INIT_VALUE[10] = #60000 1'bX;
end 
// INIT_VALUE[ 9 ]
initial
begin
	INIT_VALUE[9] = 1'b0;
	INIT_VALUE[9] = #60000 1'bX;
end 
// INIT_VALUE[ 8 ]
initial
begin
	INIT_VALUE[8] = 1'b0;
	INIT_VALUE[8] = #60000 1'bX;
end 
// INIT_VALUE[ 7 ]
initial
begin
	INIT_VALUE[7] = 1'b0;
	INIT_VALUE[7] = #60000 1'bX;
end 
// INIT_VALUE[ 6 ]
initial
begin
	INIT_VALUE[6] = 1'b0;
	INIT_VALUE[6] = #60000 1'bX;
end 
// INIT_VALUE[ 5 ]
initial
begin
	INIT_VALUE[5] = 1'b0;
	INIT_VALUE[5] = #60000 1'bX;
end 
// INIT_VALUE[ 4 ]
initial
begin
	INIT_VALUE[4] = 1'b0;
	INIT_VALUE[4] = #60000 1'bX;
end 
// INIT_VALUE[ 3 ]
initial
begin
	INIT_VALUE[3] = 1'b0;
	INIT_VALUE[3] = #40000 1'b1;
	INIT_VALUE[3] = #20000 1'bX;
end 
// INIT_VALUE[ 2 ]
initial
begin
	INIT_VALUE[2] = 1'b1;
	INIT_VALUE[2] = #20000 1'b0;
	INIT_VALUE[2] = #40000 1'bX;
end 
// INIT_VALUE[ 1 ]
initial
begin
	INIT_VALUE[1] = 1'b1;
	INIT_VALUE[1] = #60000 1'bX;
end 
// INIT_VALUE[ 0 ]
initial
begin
	INIT_VALUE[0] = 1'b1;
	INIT_VALUE[0] = #20000 1'b0;
	INIT_VALUE[0] = #40000 1'bX;
end 
// INSTRUCTION[ 31 ]
initial
begin
	INSTRUCTION[31] = 1'b0;
end 
// INSTRUCTION[ 30 ]
initial
begin
	INSTRUCTION[30] = 1'b0;
	INSTRUCTION[30] = #80000 1'b1;
	INSTRUCTION[30] = #19000 1'b0;
end 
// INSTRUCTION[ 29 ]
initial
begin
	INSTRUCTION[29] = 1'b0;
end 
// INSTRUCTION[ 28 ]
initial
begin
	INSTRUCTION[28] = 1'b0;
end 
// INSTRUCTION[ 27 ]
initial
begin
	INSTRUCTION[27] = 1'b0;
end 
// INSTRUCTION[ 26 ]
initial
begin
	INSTRUCTION[26] = 1'b0;
end 
// INSTRUCTION[ 25 ]
initial
begin
	INSTRUCTION[25] = 1'b0;
end 
// INSTRUCTION[ 24 ]
initial
begin
	INSTRUCTION[24] = 1'b0;
	INSTRUCTION[24] = #99000 1'b1;
end 
// INSTRUCTION[ 23 ]
initial
begin
	INSTRUCTION[23] = 1'b1;
	INSTRUCTION[23] = #60000 1'b0;
end 
// INSTRUCTION[ 22 ]
initial
begin
	INSTRUCTION[22] = 1'b0;
end 
// INSTRUCTION[ 21 ]
initial
begin
	INSTRUCTION[21] = 1'b0;
	INSTRUCTION[21] = #60000 1'b1;
	INSTRUCTION[21] = #39000 1'b0;
end 
// INSTRUCTION[ 20 ]
initial
begin
	INSTRUCTION[20] = 1'b0;
	INSTRUCTION[20] = #80000 1'b1;
	INSTRUCTION[20] = #19000 1'b0;
end 
// INSTRUCTION[ 19 ]
initial
begin
	INSTRUCTION[19] = 1'b0;
	INSTRUCTION[19] = #99000 1'b1;
end 
// INSTRUCTION[ 18 ]
initial
begin
	INSTRUCTION[18] = 1'b1;
	INSTRUCTION[18] = #60000 1'b0;
	INSTRUCTION[18] = #39000 1'b1;
end 
// INSTRUCTION[ 17 ]
initial
begin
	INSTRUCTION[17] = 1'b1;
	INSTRUCTION[17] = #60000 1'b0;
end 
// INSTRUCTION[ 16 ]
initial
begin
	INSTRUCTION[16] = 1'b0;
	INSTRUCTION[16] = #80000 1'b1;
	INSTRUCTION[16] = #19000 1'b0;
end 
// INSTRUCTION[ 15 ]
initial
begin
	INSTRUCTION[15] = 1'b0;
	INSTRUCTION[15] = #60000 1'b1;
	INSTRUCTION[15] = #20000 1'b0;
end 
// INSTRUCTION[ 14 ]
initial
begin
	INSTRUCTION[14] = 1'b0;
end 
// INSTRUCTION[ 13 ]
initial
begin
	INSTRUCTION[13] = 1'b0;
end 
// INSTRUCTION[ 12 ]
initial
begin
	INSTRUCTION[12] = 1'b0;
end 
// INSTRUCTION[ 11 ]
initial
begin
	INSTRUCTION[11] = 1'b0;
end 
// INSTRUCTION[ 10 ]
initial
begin
	INSTRUCTION[10] = 1'b0;
end 
// INSTRUCTION[ 9 ]
initial
begin
	INSTRUCTION[9] = 1'b0;
	INSTRUCTION[9] = #60000 1'b1;
end 
// INSTRUCTION[ 8 ]
initial
begin
	INSTRUCTION[8] = 1'b0;
	INSTRUCTION[8] = #20000 1'b1;
	INSTRUCTION[8] = #20000 1'b0;
end 
// INSTRUCTION[ 7 ]
initial
begin
	INSTRUCTION[7] = 1'b1;
	INSTRUCTION[7] = #20000 1'b0;
	INSTRUCTION[7] = #20000 1'b1;
	INSTRUCTION[7] = #20000 1'b0;
	INSTRUCTION[7] = #20000 1'b1;
	INSTRUCTION[7] = #19000 1'b0;
end 
// INSTRUCTION[ 6 ]
initial
begin
	INSTRUCTION[6] = 1'b0;
	INSTRUCTION[6] = #40000 1'b1;
	INSTRUCTION[6] = #20000 1'b0;
end 
// INSTRUCTION[ 5 ]
initial
begin
	INSTRUCTION[5] = 1'b1;
	INSTRUCTION[5] = #80000 1'b0;
	INSTRUCTION[5] = #19000 1'b1;
end 
// INSTRUCTION[ 4 ]
initial
begin
	INSTRUCTION[4] = 1'b1;
end 
// INSTRUCTION[ 3 ]
initial
begin
	INSTRUCTION[3] = 1'b0;
end 
// INSTRUCTION[ 2 ]
initial
begin
	INSTRUCTION[2] = 1'b0;
end 
// INSTRUCTION[ 1 ]
initial
begin
	INSTRUCTION[1] = 1'b1;
end 
// INSTRUCTION[ 0 ]
initial
begin
	INSTRUCTION[0] = 1'b1;
end 

top_level_KMC_vlg_sample_tst tb_sample (
	.clock(clock),
	.INIT_Enable(INIT_Enable),
	.INIT_VALUE(INIT_VALUE),
	.INSTRUCTION(INSTRUCTION),
	.sampler_tx(sampler)
);

top_level_KMC_vlg_check_tst tb_out(
	.ADDRESS(ADDRESS),
	.CURRENT_PC(CURRENT_PC),
	.LOOK(LOOK),
	.PROBE(PROBE),
	.READ_VALUE(READ_VALUE),
	.sampler_rx(sampler)
);
endmodule

